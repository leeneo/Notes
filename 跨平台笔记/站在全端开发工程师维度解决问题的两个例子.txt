举一个我经历过的例子，曾经在做一个高流量网站的某个功能的时候，发现很难在公司硬件预算之内用PHP和数据库本身得到长期可伸缩性方案，这是功能需要实时数据的多维度筛选，并且要把前端的响应控制在3秒之内，一般网站的相应应该在1秒以下，但就是这个功能的可用性因为速度的问题，迟迟得不到提高（单纯后台的解决方案我们当时要用到20秒以上，基本不可用）。最后我们从一些其他类似网站得到了启发，在前端用ajax分布分片加载数据，然后分发给跑在浏览器里的多个web worker，让它们去作复杂的数据计算，然后把结果逐步地传给主进程render给用户，这个过程没有blocking，单片数据可以控制到200ms以下，用户基本感觉不到需要等待。这是一个核心基于前端技术的方案，完胜纯后端方案。

另一个例子是从前端到后端的例子，我们有一个相对复杂的mobile应用，有两组大概30个template需要render，相当的数据会用这30个template来render，虽然模板都是js预编译的，也就是说没有实时parse的问题，但我们还是不想在mobile里执行太多string concatenation（编译后的js模板），最终我们把数据以及模板的render整合移到了后端，我们的REST API会直接产生可以直接innerHTML的view，前端只需要传合适的参数告诉后端如何render就可以了（完全的后端的view），这样省去了我们原来不得不去做的前端优化，这种情况下优化后端要简洁多了。

所以成为全端工程师不是多懂一种语言，多熟悉某些技术这么简单，在一端思考问题和在整栈思考问题的落脚点的不同，会深刻地影响你的架构和实现。