===============================================================================================
技巧
===============================================================================================

四种绑定形式：
{{value}}:                component --> Dom
[property]="variable":    component --> Dom   把父组件variable的值传到子组件的variable变量中，子组件通过使用@Input()声明variable：@Input() variable:类型
(event)="handler":        Dom --> component
[(ng-model)]="property":  Dom <--> component

子父组件传值
@Input()修饰符
@Output()修饰符
===============================================================================================

0、引用
<!-- #usernameRef，表示引用（reference），这里引用的是input这个对象，然后传递input的value给组件的onClick()函数，在组件中处理input的值，是不是有点像asp.net 的控制器 -->
<div>
  <input #usernameRef type="text">
  <input #passwordRef type="password" name="pwd" id="pwd">
  <button (click)="onClick(usernameRef.value,passwordRef.value)">Login</button>
</div> -->

--login组件
onClick(username, password) {
  console.log('username:' + username + "\n"+"password:" + password);
}

===============================================================================================

管道
Angular 的管道可以让你在模板中声明显示值的转换逻辑。 带有 @Pipe 装饰器的类中会定义一个转换函数，用来把输入值转换成供视图显示用的输出值。
Angular 自带了很多管道，比如 date 管道和 currency 管道，也可以自己定义新管道。
使用管道操作符 (|) 在 HTML 模板中指定值的转换方式。
{{interpolated_value | pipe_name}}

Demo:
<!-- Default format: output 'Jun 15, 2015'-->
<p>Today is {{today | date}}</p>

<!-- fullDate format: output 'Monday, June 15, 2015'-->
<p>The date is {{today | date:'fullDate'}}</p>

<!-- shortTime format: output '9:43 AM'-->
<p>The time is {{today | date:'shortTime'}}</p>
===============================================================================================

指令-Directives
Angular 的模板是动态的。当 Angular 渲染它们的时候，会根据指令给出的指示对 DOM 进行转换。 指令就是一个带有 @Directive() 装饰器的类。
组件从技术角度上说就是一个指令，但是由于组件对 Angular 应用来说非常独特、非常重要，因此 Angular 专门定义了 @Component() 装饰器，它使用一些面向模板的特性扩展了 @Directive() 装饰器。
除组件外，还有两种指令：结构型指令和属性型指令。 Angular 本身定义了一系列这两种类型的指令，也可以使用 @Directive() 装饰器来定义自己的指令。

结构型指令
结构型指令通过添加、移除或替换 DOM 元素来修改布局。 这个范例模板使用了两个内置的结构型指令来为要渲染的视图添加程序逻辑：

DEMO:
<li *ngFor="let hero of heroes"></li>
<app-hero-detail *ngIf="selectedHero"></app-hero-detail>

*ngFor 是一个迭代器，它要求 Angular 为 heroes 列表中的每个英雄渲染出一个 <li>。
*ngIf 是个条件语句，只有当选中的英雄存在时，它才会包含 HeroDetail 组件。

属性型指令
属性型指令会修改现有元素的外观或行为。 在模板中，它们看起来就像普通的 HTML 属性一样，因此得名“属性型指令”。

DEMO:
<input [(ngModel)]="hero.name">

[(ngModel)] 指令就是属性型指令的一个例子，它实现了双向数据绑定。 ngModel 修改现有元素（一般是 <input>）的行为：设置其显示属性值，并响应 change 事件。

Angular 还有很多预定义指令既不修改布局结构（比如 ngSwitch），也不修改 DOM 元素和组件的样子（比如 ngStyle 和 ngClass）。

===============================================================================================
概念
===============================================================================================

概述：

Angular 是由 Typescript写成的，一组特定功能的NgModule集合。
Angular 应用架构：模块（module），组件（component，包括模板、指令和数据绑定），服务与依赖注入，路由（Router）。
===============================================================================================

模块：
应用的基本构造块NgModule（为组件提供编译的上下文环境）。
一个 NgModule 就是一个容器，用于存放一些内聚的代码块，这些代码块专注于某个应用领域、某个工作流或一组紧密相关的功能。
每个Angular应用至少有一个用于引导应用的根模块，根模块总会有一个根组件，并在引导期间创建它。
使用 @NgModule() 装饰器声明模块。
@NgModule() 装饰器是一个函数，它接受一个元数据对象（一个Json{}对象），该对象的属性用来描述这个模块
@NgModule({
  imports:      [ BrowserModule ],   --imports（导入表） —— 那些导出了本模块中的组件模板所需的类的其它模块。
  providers:    [ Logger ],          --providers —— 本模块向全局服务中贡献的那些服务的创建器。 这些服务能被本应用中的任何部分使用。（也可以在组件级别指定服务提供商，这通常是首选方式。）
  declarations: [ AppComponent ],    --declarations（可声明对象表） —— 那些属于本 NgModule 的组件、指令、管道
  exports:      [ TodoComponent ],   --exports（导出表） —— 那些能在其它模块的组件模板中使用的可声明对象的子集。
  bootstrap:    [ AppComponent ]     --bootstrap —— 应用的主视图，称为根组件。它是应用中所有其它视图的宿主。只有根模块才应该设置这个 bootstrap 属性。
})

===============================================================================================

组件：
定义视图，每个应用都至少有一个根组件。
每个组件都会定义一个类，封装应用的数据和逻辑，并和一个HTML模板关联起来。
可以使用服务，服务提供商可以作为依赖被注入到组件中。
组件和服务都是简单的类，使用装饰器来标出它们的类型。
使用@Component() 装饰器声明组件类。

模板&指令：
模板把普通的 HTML 和 Angular 指令与绑定标记（markup）组合起来，这样 Angular 就可以在呈现 HTML 之前先修改这些 HTML。
模板中的指令提供程序逻辑，绑定标记把应用中的数据和DOM连接在一起。

数据绑定：
事件绑定，可以通过更新应用的数据来响应目标环境下的用户输入。
属性绑定，将从应用数据中计算出来的值插入到 HTML 中。
Angular 在每个 JavaScript 事件循环中处理所有的数据绑定，它会从组件树的根部开始，递归处理全部子组件。
数据绑定在模板及其组件之间的通讯中扮演了非常重要的角色，它对于父组件和子组件之间的通讯也同样重要。

服务：
对于与特定视图无关并希望跨组件共享的数据或逻辑，可以创建服务类。
使用“@Injectable()” 装饰器定义服务类，该装饰器提供的元数据可以让你的服务作为依赖被注入到客户组件中。
服务类的元数据提供了一些信息，Angular 要用这些信息来让组件可以通过依赖注入（DI）使用该服务。
依赖注入（或 DI）让你可以保持组件类的精简和高效。有了 DI，组件就不用从服务器获取数据、验证用户输入或直接把日志写到控制台，而是会把这些任务委托给服务。


路由：
应用的组件通常会定义很多视图。 Angular 提供了 Router 服务来实现不同视图之间的切换(基于视图层次结构，定义导航路径)。 路由器提供了先进的浏览器内导航功能。
路由器会根据你应用中的导航规则和数据状态来拦截 URL，并跳转到导航规则中的视图。
导航路径（path）使用类似 URL 的语法来和程序数据整合在一起。
如果路由器认为当前的应用状态需要某些特定的功能，而定义此功能的模块尚未加载，路由器就会按需惰性加载此模块。

Tips:
组件和模板共同定义了 Angular 的视图。
组件类上的装饰器为其添加了元数据，其中包括指向相关模板的指针。
组件模板中的指令和绑定标记会根据程序数据和程序逻辑修改这些视图。
依赖注入器会为组件提供一些服务，比如路由器服务就能让你定义如何在视图之间导航。
Angular的NgModule 系统与 JavaScript（ES2015）用来管理 JavaScript 对象的模块系统不同，而且也没有直接关联。 这两种模块系统不同但互补。可以使用它们来共同编写你的应用。
JavaScript 中，每个文件是一个模块，文件中定义的所有对象都从属于那个模块。 通过 export 关键字，模块可以把它的某些对象声明为公共的。 其它 JavaScript 模块可以使用import 语句来访问这些公共对象。
Angular 会作为一组 JavaScript 模块进行加载，可以看成库模块。每个 Angular 库的名称都带有 @angular 前缀。 使用 npm 包管理器安装 Angular 的库，并使用 JavaScript 的 import 语句导入其中的各个部分
比如：import { BrowserModule } from '@angular/platform-browser';
使用时，把它加入 @NgModule 元数据的 imports 中
比如：imports:      [ BrowserModule ]

每个应用都有一个根模块(AppModule)
每个组件都有component.ts,component.html,component.css 三个文件；每个component都有一个装饰器函数（@Component）
每个模块或组件文件都会export一个类，可以被其他模块或组件import，ts文件就是类的导出和引入文件；
组件的装饰器函数（@Componet）定义自身标记（selector），templateUrl,styleUrls三部分。
===============================================================================================

1、依赖性注入：DI (Dependency Injection)
注入器通过提供商新建依赖，提供商--交付服务的配方，被关联到一个令牌；
初始化注入器，通常用组件或者根元素中的providers数组进行注册。

依赖性注入：app.module 中配置 providers: [{provide:'auth',useClass:AuthService}]，需要引入(import)AuthService
使用时在构造中声明@Inject('auth') private service,需要import {Inject} from '@angular/core'
任何类都可以提供注入，这是一种解耦方式，通过providers提供，通过构造注入
@demo
constructor( userService: UserService) { }

提供商providers:[]提供服务的几种方式

(1)、简单的类
@demo
providers:[AuthService,UserService]

使用：constructor(private service:AuthService){}

(2)、令牌
@我们通常在构造函数里面，为参数指定类型，让 Angular 来处理依赖注入。该参数类型就是依赖注入器所需的令牌。

providers: [ { provide: 'auth', useClass: AuthService }, { provide: 'user', useClass: UserService }, { provide: BASE_ URL, useValue: 'http:// localhost: 3000/ todos' }, AuthGuardService ]
@tips
providers是由provide对象组成的一个数组：
{ provide: 'auth', useClass: AuthService }，对应类供应商
{ provide: BASE_ URL, useValue: 'http:// localhost: 3000/ todos' }，这种形式对应值供应商
第一个属性叫令牌，第二个属性叫定义对象 
AuthGuardService 这是一个语法糖，等价于{provide:AuthGuardService,useClass:AuthGuardService}

(3)、别名提供商
{ provide: MinimalLogger, useExisting: LoggerService },

(4)、工厂提供商：调用工厂函数新建一个依赖对象
{ provide: HELLO, useFactory: helloFactory( 2), deps: [Greeting, HelloService] } 
@使用这项技术，可以用包含了一些依赖服务和本地状态输入的工厂函数来建立一个依赖对象。
helloFactory自身不是提供商工厂函数;
真正的提供商工厂函数是helloFactory返回的函数：
export function helloFactory( take: number) { return (greeting: Greeting, helloService: HelloService): string => { /* ... */ }; };

DI就是将对象，服务或者常量通过providers提供，在构造中注入；
注入方式有两种：
1，内部引用对象，providers提供，构造中注入
import { AuthService };
providers:[AuthService]
constructor(private service:AuthService)
2，通过令牌方式，在构造中注入constructor(@Inject('auth') private service) { }
令牌声明/app.module.ts
providers:[
{provide: 'auth',userClass:AuthService},    { provide: BASE_URL,  useValue:   'http://localhost:3000/todos' },
UserService]
auth,BASE_URL就是声明的令牌
useClass 形式叫“类供应商”
userValue 形式叫“值供应商”
*值供应商一般用来设置运行期常量，比如网站的baseUrl,logo等

===============================================================================================

双向数据绑定机制

原理：组件中提供成员数据变量，然后模板中引用这个数据变量

<!-- [{ngModel}],方括号的含义是将“=”后面当成表达式来解析而不是字符串
[]是单向绑定，我们 在 组件 中 给 model赋 的 值 会 设置 到 HTML 的 input 控 件 中。
[()]是双向绑定，意思， 就是说 HTML 对应 控 件 的 状态 改变 会 反射 设置 到 组件 的 model 中。
ngModel 是 FormModule 中 提供 的 指令， 它 负责 从 Domain Model（ 这里 就是 username 或 password， 以后 我们 可以 绑 定 更 复杂 的 对象） 中 创建 一个 FormControl 的 实例， 并将 这个 实例 和 表单 的 控 件 绑 定 起来。 -->


*ngFor指令用于迭代引用指令的元素
For Example:
<li *ngFor="let hero of heroes">
heroes 是一个在模板对应组件中定义的数组或者List集合；

*ngIf指令根据条件决定是否显示某元素
For Example:
<div *ngIf="selectedHero"></div>
当selectedHero 存在时显示div,undefine时不显示div
selectedHero是在组件中定义的对象。

[class.css-class]="some-condition" 用于设定符合某些条件下元素的显示样式
For Example:
<li *ngFor="let hero of heroes" [class.selected]="hero === selectedHero" ></li>
CSS File:.selected{}
===============================================================================================

函数定义
functionName(obj:Object):Object|Const{return Object|Const}
functionName(参数:参数类型):返回类型{}

cmd:ng g s serviceName  创建服务
在向组件注入服务之前，必需先在依赖注入系统中注册此服务
服务提供方式可以在UserComponent，AppComponent,AppModule中进行，每种方式都有各自的优缺点。
自动注册：ng g s serviceName --module=app 创建服务时，附加--module=app 可在AppModule中注册此服务
建议手动注册，自动注册可能会有问题
手动注册：app.module.ts => providers:[serviceName1,serviceName2],
*The providers array tells Angular to create a single, shared instance of HeroService and inject into any class that asks for it.

<input type="text" name='username' [(ngModel)]="username" #usernameRef='ngModel' required minlength="3" placeholder="请输入用户名" (focus)="onFocus(usernameRef)"/>
#usernameRef 表示在ts文件中引用<input>标记，#usernameRef='ngModel'表示可以在当前模板文件中引用该标记,此时在ts文件中对该标记的引用：username.valueAccessor._elementRef.nativeElement。

Angular 把组件的模板看做从属于该组件的。 组件和它的模板默认会相互信任。也就是组件模板可以绑定组件的任意属性。想要绑定其他组件的属性时需要用 @Input将该属性设置为公共的，否则angular拒绝绑定；

[(ngModel)]双向绑定指令不被识别的错误解决方法：
在app.module.ts的imports中引入FormsModule

ngForm 声明form是ngForm类型
 <form #formRef='ngForm' (ngSubmit)='onSubmit(formRef)'></form>
   onSubmit(value:NgForm) {
    console.log(typeof value);==>Object;
  }

//克隆一个对象到一个新对象，返回新对象
let updatedTodo = Object.assign({}, todo, { completed: !todo.completed });

虚拟内存API
npm install --save angular-in-memory-web-api@0.5.4
*此项操作必须安装0.6.0以下，超过此版本会出现数据无法读取等问题(404等路由问题）

service中需引入import 'rxjs/add/operator/toPromise';
可能需要npm i rxjs;npm i rxjs-compat;

===============================================================================================

导入 BrowserModule 会让该模块公开的所有组件、指令和管道在 AppModule 下的任何组件模板中直接可用，而不需要额外的繁琐步骤。
CommonModule 提供了很多应用程序中常用的指令，包括 NgIf 和 NgFor 等。BrowserModule 导入了 CommonModule 并且 重新导出 了它。 
最终的效果是：只要导入 BrowserModule 就自动获得了 CommonModule 中的指令。

几乎所有要在浏览器中使用的应用的 根模块 （ AppModule ）都应该从 @angular/platform-browser 中导入 BrowserModule 。
在其它任何模块中都 不要导入 BrowserModule，应该改成导入 CommonModule 。 它们需要通用的指令。它们不需要重新初始化全应用级的提供商

===============================================================================================
命令
===============================================================================================

ng命令操作

ng help
ng v 版本

新建项目：ng new helloAngular -->cd helloangular
--> cnpm install --> ng serve -o | --open 
ng set -g packageManager=cnpm --global
@：ng serve 不带 -o 指令貌似打开速度更快一点
运行：ng serve 此命令需要在项目根目录下执行（shift 右键-->在此处运行cmd）

新建组件：
1，ng generate component login --inline-template --inline-style	-->
模板，样式，组件在一个文件里
简化:ng g c login -it -is
2，ng generate component name
模板文件，样式文件，类文件分开放置
简化:ng g c login
===============================================================================================

--引导过程
Angular2通过在src/main.ts中引导AppModule来启动应用，src/index.html为app首页展示页，类似于一个母板，集合了根组件标签<app-root></app-root>；
所有组件在app.module.ts根模块中进行注册，app.component 为app根组件，其他组件标签通过整合进根组件标签<app-root></app-root>，然后再由index.html中呈现出来；（自定义组件标签直接放进index.html中并不会起效果）
这就形成了一个组件构成形式的单页面应用！

app.module/bootstrap指明哪个组件为引导性组件（本案例中的AppComponent）。当Angular引导应用时，它会在DOM中渲染这个引导性组件，并把结果放进index.html的该组件的元素标签中（本案例中的app-root）。

--引导模式，详见angular-cli.txt
JiT:动态引导  //开发调试，默认方式，连同Angular编译器一起发布到浏览器
AoT:静态引导  //生成更小、启动更快的应用，不把编译器发布到浏览器
*修改main.ts 引用模块来改变引导模式
===============================================================================================

引入第三方JS类库
1,包中已有*.d.ts后缀的类型定义文件，直接使用npm i --save packageName
2,没有.d.ts文件，npm i --save packageName=>npm i @types/packageName --save-dev(意思是在@types/搜索安装类 型定义文件)
3，找不到类型定义文件，需要手动添加类型定义：src/typings.d.ts=>declare module 'packageName'=>组件中  import * as friendName(别名) from 'packageName'=> friendName.method()

标签语法：
*angular严格区分大小写：组件定义函数onClick()与标签引用函数(click)="onclick()" 大小写不一致就会报错！
<!-- (click)="onClick()"，圆括号是说发生此事件时，调用等号后面的表达式或函数;等号后面的onClick()是我们自己定义在LoginComponent中的函数，这个名称你可以随便定成什么，不一定叫onClick() -->
===============================================================================================

服务
新建服务：ng g s core/auth=>在src/app/core 目录下建立auth.service.ts

//可以为方法指定参数类型和返回类型
//boolean 返回类型；string 参数类型
*类型约束，你在别处调用这个方法时，如果给出的参数类型或返回类型不正确，IDE就可以直接告诉你错了
loginWithCredentials(username: string, password: string): boolean {
  if (username === 'leeneo')
    return true
  return false
}
--app.module.ts 根模块中的providers是配置在模块中全局可用的service或参数的
providers: [{provide: 'auth',  useClass: AuthService}]
provide:服务名称，useClass:该服务对应的类

===============================================================================================