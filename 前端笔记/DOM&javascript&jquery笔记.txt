*******************************************************************************************
HTML DOM 对象
*******************************************************************************************
document.body 		 	是DOM中Document对象里的body节点
document.documentElement 	是文档对象根节点(html)的引用，包含html中的内容。
dom.addEventlisnter();

声明变量同时赋初始值，以确定数据类型，后续程序调用不会出错。只是变量声明，会生成五大数据区域，有可能读不出正确的值。

innerHTML与innerText的用法与区别

<div id="test">
   <span style="color:red">test1</span> test2
</div>
test.innerHTML:

　　也就是从对象的起始位置到终止位置的全部内容,包括Html标签。

　　上例中的test.innerHTML的值也就是“<span style="color:red">test1</span> test2 ”。

test.innerText: 

　　从起始位置到终止位置的内容, 但它去除Html标签 

　　上例中的test.innerTest的值也就是“test1 test2”, 其中span标签去除了。

test.outerHTML:

　　除了包含innerHTML的全部内容外, 还包含对象标签本身。

　　上例中的test.outerHTML的值也就是<div id="test"><span style="color:red">test1</span> test2</div>

*******************************************************************************************




*******************************************************************************************
JavaScript 语法
*******************************************************************************************
js搬家-入口函数
<script>
	window.onload = function(){	//页面加载完成的事件 入口函数
		var box = document.getElementById('box');
		box.onclick = function(){
			//alert(box.innerHTML);	
			alert(this.innerHTML);
		}	
	}

</script>

typeof():检测数据类型
parseInt();将字符串转换为整数型
window.alert();window.prompt();弹出；
document.write();文档输出流；
console.log();浏览器调试；

采用DOM方法建立一个新元素节点

var layer=document.createElement("div");
layer.setAttribute("id","WndName");
layer.innerHTML="盒子内容";
//var txt=document.createTextNode("div里面放置的内容");
//layer.appendChild(txt);
document.body.appendChild(layer);

JS数组的数据类型是object,可以存放任何一种数据；
typeof(array)=typeof array=object;

Math.random();生成0到1之间的小数；
Math.random()*5;生成0到5之间的小数；
parseInt(Math.random());去掉小数点，生成整数。
parseInt(Math.random()*2);生成的值为：0，1；

js变量声明提前
console.log(n);	//undefined
var n;
===========================================================================================
<script>
/*for（1;2;3)语句的执行顺序是 先执行1，然后判断2，为真就执行内嵌语句，语句完成后执行3，然后开始下次循环。*/　 
for(var i=0;i<3;i++){
	alert("i:"+i+"\n");
}
</script>
/*
执行结果：
i:0
i:1
i:2
*/
===========================================================================================
document.body.clientHeight; //页面内容高度
window.innerHeight;	//浏览器可视区域高度

[html>body>div>span 同名事件会由子元素传递到父元素,即冒泡。
在事件中加入e.stopPropagation();阻止事件传递。
document.querySelector('selector').onclick=function(e){console.log('span');e.stopPropagation();}]

confirm(string str)用法与alert(string str)一样，不同的是confirm弹出的是确认框，确定：true,取消：false
===========================================================================================
截取字符串方法 slice,substring,substr的区别

substr(start,length?) 方法可在字符串中抽取从 start 下标开始的指定数目的字符。
start	起始下标。如果是负数，那么它规定从字符串尾部开始算起的位置。也就是说，-1 指最后一个字符，-2 指倒数第二个字符，以此类推。
	从尾部（-1）开始往头数。
length	可选。要提取的字符数。省略，表示到字符串结尾。
返回一个包含从 start（包括 start 所指的字符） 处开始的 length 个字符。如果没有指定 length，那么返回的字符串包含从 start 到结尾的字符。
*：ECMAscript 没有对该方法进行标准化，因此反对使用它。
*：在 IE 4 中，参数 start 的值无效。在这个 BUG 中，start 规定的是第 0 个字符的位置。在之后的版本中，此 BUG 已被修正。
//负数起始
var str='abcde';str.substr(-5,2);
//"ab"

substring(start,stop?) 方法用于提取字符串中介于两个指定下标之间的字符。
start	必需。一个非负的整数。
stop	可选。一个非负的整数。省略，表示到字符串结尾。
返回一个包含从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。不改变原有的字符串。
*substring() 方法返回的子串包括 start 处的字符，但不包括 stop 处的字符。
*如果 start 与 stop 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。如果 start 比 stop 大，那么该方法在提取子串之前会先交换这两个参数。
*substring会自动调换参数顺序

slice(start,end?) 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分
start  起始下标。如果是负数，那么它规定从字符串尾部开始算起的位置。也就是说，-1 指最后一个字符，-2 指倒数第二个字符，以此类推。
end    结尾下标，未指定，表示到字符串结尾。
返回一个新的字符串，包含从 start 到 end-1 （不包括end索引处字符）的所有字符。不改变原有的字符串。
*与Array.slice()方法用法一样，只不过截取数组返回数组，截取字符串返回字符串
//负数起始
var str='abcde';str.slice(-5,-3);
//"ab"
var str="Hello!"
document.write(str.slice(0,2))
//'He'

*String 对象的方法 slice()、substring() 和 substr() （不建议使用）都可返回字符串的指定部分。slice() 比 substring() 要灵活一些，因为它允许使用负数作为参数。slice() 与 substr() 有所不同，因为它用两个字符的位置来指定子串，而 substr() 则用字符位置和长度来指定子串。

//共同的特性：都是从指定开始位置到指定结束（未指定表示到结尾）位置
var arr = [1,2,3,4,5,6,7],
    str = "helloworld!";  //防止空格干扰，不用带空格的，注意这里有个！号也算一位 
//1. 都使用一个参数：
console.log(str.slice(1));  //elloworld!  
console.log(str.substring(1)); //elloworld! 
console.log(str.substr(1));  //elloworld! 
//2. 都使用两个正数参数（第一个小于第二个）：
console.log(str.slice(1,4));  //ell
console.log(str.substring(1,4));  //ell
console.log(str.substr(1,4)); //ello  不一致了！！！
//3. 都使用两个正数参数（第一个大于第二个）：
console.log(str.slice(5,1));  //""
console.log(str.substring(5,1));  //ello
console.log(str.substr(5,1));  //"w"
//4. 使用一正一负两个参数（第一正，第二负）
console.log(str.slice(1,-2)); //elloworl
console.log(str.substr(1,-2));  //""
console.log(str.substring(1,-2));  //h
//5. 使用一正一负两个参数（第一负，第二正）
console.log(str.slice(-3,1))  //""
console.log(str.substr(-3,1))  //l
console.log(str.substring(-3,1))  //h
//6. 全负数（两种情况合一）
console.log(str.slice(-1,-5));
console.log(str.substr(-1,-5));
console.log(str.substring(-1,-5));
//上面的结果全是空		
console.log(str.slice(-5,-1)); //orld
console.log(str.substr(-5,-1)); //""
console.log(str.substring(-5,-1)); //""

===========================================================================================
数组常用操作方法 以及slice & splice 的区别

concat() 方法用于连接两个或多个数组。
返回一个新的数组。该数组是通过把所有 arrayX 参数添加到 arrayObject 中生成的。如果要进行 concat() 操作的参数是数组，那么添加的是数组中的元素，而不是数组。
var a = [1,2,3];
document.write(a.concat(4,5));//连接一个或多个值

var arr = new Array(3)
arr[0] = "George"
arr[1] = "John"
var arr2 = new Array(3)
arr2[0] = "James"
arr2[1] = "Adrew"
document.write(arr.concat(arr2))//arr.concat(arr1,arr2,arr3...) //多数组连接，以此类推

join(separator?) 方法用于把数组中的所有元素放入一个字符串。并通过指定的分隔符分隔。
返回一个字符串。该字符串是通过把 arrayObject 的每个元素转换为字符串，然后把这些字符串连接起来，在两个元素之间插入 separator 字符串而生成的。
var arr = new Array(3)
arr[0] = "George"
arr[1] = "John"
arr[2] = "Thomas"
document.write(arr.join())//等同于 arr.join(',')

pop() 方法用于删除并返回数组的最后一个元素。//类似于栈的先进后出
该方法将会使数组长度减 1，并且返回它删除的元素的值。如果数组已经为空，则 pop() 不改变数组，并返回 undefined 值。

shift() 方法用于删除并返回数组的第一个元素。//类似于堆的队列规则，先进先出
返回从数组中移除的元素，并使数组长度减1。

push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。
返回添加后数组的新长度。
unshift() 方法可向数组的开头添加一个或多个元素，并返回新的长度。
返回添加后数组的新长度。

reverse() 方法用于颠倒数组中元素的顺序。
返回颠倒元素后的原数组。

sort(sortby?) 方法用于对数组的元素进行排序。

*sortby ————排序函数
sortby函数应该具有两个参数 a 和 b，其返回值如下：
若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。
若 a 等于 b，则返回 0。
若 a 大于 b，则返回一个大于 0 的值。

如果未指定sortby函数，将按照字符编码的顺序进行排序。要实现这一点，首先应把数组的元素都转换成字符串（如有必要），以便进行比较。
//按默认字符编码排序
var arr = new Array(6)
arr[0] = "George"
arr[1] = "John"
arr[2] = "Thomas"
arr[3] = "James"
arr[4] = "Adrew"
arr[5] = "Martin"
document.write(arr + "<br />")
document.write(arr.sort())

//按指定排序函数排序
function sortNumber(a,b)
{
	return a - b
}
var arr = new Array(6)
arr[0] = "10"
arr[1] = "5"
arr[2] = "40"
arr[3] = "25"
arr[4] = "1000"
arr[5] = "1"
document.write(arr + "<br />")
document.write(arr.sort(sortNumber))

toString() 方法可把数组转换为字符串，并返回结果。
返回值与没有参数的 join() 方法返回的字符串相同（以‘,’隔开）

toLocaleString() 把数组转换为本地字符串。
arrayObject 的本地字符串表示。

slice(start,end?) 从已有的数组中截取一个新的数组。
start 规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。
end   未指定表示到数组结尾。
返回一个新的数组，包含从 start 到 end-1 （不包括end索引处元素）的 arrayObject 中的元素。不改变原有的数组。
*不改变原数组
*start，end 都为正，或其中一个为负，需要start大于end，否则返回空；如果都为负，start需要小于end.

splice(index,delNum,item1?,item2?,item...?) 方法向/从数组中添加/删除项目，然后返回被删除的项目。
index	必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。
delNum	必需。要删除的项目数量。如果设置为 0，则不会删除项目。
item1?, item...? 可选。向数组添加的新项目。
返回包含被删除项目的新数组，如果有的话。
*会改变原数组。

var arr = new Array(6)
arr[0] = "George"
arr[1] = "John"
arr[2] = "Thomas"
arr[3] = "James"
arr[4] = "Adrew"
arr[5] = "Martin"
arr.splice(2,0,"William")
document.write(arr + "<br />")
//George,John,William,Thomas,James,Adrew,Martin
//在指定索引处插入或删除，用来替换的元素会填充到指定索引处
*******************************************************************************************
 delete 删除数组或对象中的指定元素
 var arr = [1, 2, 3, 4];
 delete arr[0];
 console.log(arr);   //[undefined, 2, 3, 4]
 //delete删除之后数组长度不变，只是被删除元素被置为undefined了
 
 var obj={id:1,name:'na',value:'va'};
 delete obj.name;
 console.log(obj) //{id:1,value:'va'}


*******************************************************************************************
jQuery语法
*******************************************************************************************
入口函数
$(document)不能加引号，元素标记需要加单引号:$('div'),；

$(document).ready(function(){})可以简写为$(funtion(){});
jq入口函数可以省略，省略后的脚本要写在操作的元素下方。

js入口函数与jq入口函数区别：js入口函数（包括事件）写多个只执行最后一个;jq写多个依次顺序执行。
{} 被称为json。

语法体
<script src="jq/jquery-1.11.1.min.js"></script>
<script>
<!--
	$(function(){
		$('#btnShow').click(function(){
			$('#box1').hide();
		})
	})
-->
</script>

eq()方法获取数组中的单个对象，css()方法设置或获取元素的css属性，attr('属性名','属性值')方法设置或访问html标记属性（src vlue ...），语法同css()方法；html()设置或获取标记里的内容；

$('array').eq(n).click(funtion(){//n数组下标
	$('div').css('width');	//获取单个属性
	$('div').css('width','100px');//设置单个属性
	$('div').css({'width':'100px','height':'40px'});//设置多个属性
})

基础选择器：
$(',box>div')		子级
$(',box+div')		同级第一个兄弟元素
$('p~div') 		同级所有兄弟元素

过滤选择器：
$('div:first')
:first   选中第一个
:last    选中最后一个
:not(:firts|last)   不要哪一个
:even   偶数（显示效果是奇数）；针对下标，0也算偶数
:odd    奇数（显示效果是偶数）
:gt()   大于
:lt()   小于
:eq()   等于

与.eq() 效果完全一样
$('button:eq(0)')=$('button').eq(0)

$('button:eq(this.index())')：错误，用this关键字引用时，不可以这样用，在''内时，eq()内只能是数组下标，。
正确写法：$('button').eq(this.index())

可以复合使用
$('.box ul li:gt(2):not(:last)')//大于3且排除最后一个li

父子选择器
$(this).parent()
$(this).children()
兄弟选择器
$(this).siblings()
排他思想,经常用于banner图轮换

小括号中可以缩小选择范围,可以是CSS是选择器。$(this)这代表jq中的事件源。
如：$(this).parent('.div').html();
$(this).parent().children().html();//只能获取到子级下第一个孩子,不建议连用

模块化设计，避免重复类名
$(this).next()；相邻下一个
$(this).parent().prev()；父级上一个

获得内容 - text()、html() 以及 val()
三个简单实用的用于 DOM 操作的 jQuery 方法：
text() - 设置或返回所选元素的文本内容
html() - 设置或返回所选元素的内容（包括 HTML 标记）
val() - 设置或返回表单字段（input:value）的值

hover(function(){移入代码},function(){移出代码})
jquery $()引用的鼠标事件去掉on,要不然会报错。

.index() 获取在父元素中的排行
.eq() 获取在所有同类元素中的排行

控制标记类名
addClass('classname')
removeClass(‘cn’)
hasClass('cn')判断是否有此类名
toggleClass('cn')切换
append(),prepend()添加子节点
before(),after()添加兄弟节点
remove()删除节点，empty()清空子节点

回调函数：等动画执行完毕后，再执行的函数:callback(),complete()
$(this).slideUp(500,function(){})//动画内的function就是一个回调函数

on()给未来元素添加事件，$(document).on('事件类型','选择器',function(){})

String.replace(/被替换的内容/g,“要替换成的内容”)，/ /之间不加引号，g全局匹配符
清除字符串空格字符：var str=' test t .| .';str.replace(/ /g,'')=‘testt.|.’
//replace(value|protop)可以替换掉字符串中的特定字符，match(value|protop)可以检索字符串中是否含有特定字符，并返回该特定字符。属性可以是特定字符，也可以是正则表达式

jQurey动画
淡入，淡出效果
fadeOut(time)淡出，fadeIn(time),fadeToggle(time)
此3种fade会设置display:none;使元素不占位隐藏。
fadeTo(时间，透明度值)：改变透明度，如果设置fadeTo为0，只是可见度为0，盒子还占据原有的位置。
CSS:opacity:0-1;控制透明度

show();hide();toggle();
slideUp();slideDown();slideToggle();

stop().slideUp();	//在动画函数前加上stop()方法，可以阻止动画乱序（即上一个动画还未完成时，就加载下			一个动画效果）

animate({'':''},time)，只能设置带数值的CSS属性
如：$(this).animate({'width':'200px'},500);
animate模拟slide动画，先设置div.css('height':'0');然后.animate({'height':'100px'},500);
animate回调：
$('div').animate({'left':'500px'},500,function(){
	$('div').hide();
})

//json设置法，动画成对角线显示；
$('div').animate({'left':'800px','top':'200px'},500).animate({'opacity':'.1'},500).animate({'opacity':'1'},500).animate({'left':'100px','top':'40px'},500);

====================================================================================================
this在谁的函数体内，指示的就是谁(但在一个集合中，this仅能获取第一个元素)：
		$(document).on('click','ul li a',function(){
//					alert($(this).html());		//在这里this指示的是<a>
					$(this).parent().slideUp(500,function(){
						//回调函数：等动画函数执行完毕后 再执行的函数
//						$(this).remove();
//						alert($(this).html());	//由于这是在li函数内部，所以在这里this指示是li本身
					})
		})
====================================================================================================
each 遍历函数，代替js for循环
$('div').each(function(index,el){});index代表当次循环,选择器集合的索引值，el-element代表当次循环的那个元素，也可以使用$(this)代替；即$(el)=$(this)

事件坐标：事件发生时，function(e)，e-event存储着x,y轴的信息
e.pageX;e.pageY,用于获取元素坐标；

鼠标移动事件：
.mousemove(function(e){e.pageX;e.pageY})

测试代码：
console.log(‘要测试的代码’)，浏览器中测试代码

页面滚动事件：
$(window).scroll(function(){})
$(window).scrollTop();   //获取用户滚动的垂直距离

offset().top	//获取元素距离页面内容顶端的距离值，不是最顶端的浏览器
offset().left	//获取元素距离页面内容左侧的距离值

返回顶部
$('body','html').stop().animate({'scrollTop':'0'},500);
//这里的并集选择器，是兼容性的语法，必须这样写才是兼容代码。

定时器对象：
var timer=null;	//声明变量时，若不赋值，会生成五份变量区域
timer=setTimeout(function(){},time) //设置单次定时器,time值一般最小30
var intval=setInterval(function(){},time) //设置多次定时器
clearTimeout(timer);		//清除单次，定时器变量不能加引号，要不然会出错
clearInterval();		//清除多次

定时器中的this指示的是window；定时器是window对象，所以在定时器内部使用this时，可以先在外部用变量把this存储起来。var _this=$(this)|this;

时间对象：
var day=new Date();
day.getFullYear();
(day.getMonth()+1)//获取的是从0-11的索引值;
day.getDay()//获取周几，索引值;
day.getDate()//获取日;
day.getHours();day.getMinutes();day.getSeconds();

banner轮播：
UL>li*n>img，显示首个li的图片方法，ul添加overflow:hidden;
img所在的li一定要加position:absolute;否则图片切换时会有闪烁；

DOM对象
document.getElementsByTagName('div');
document.getElementsByClassName('cname');
document.getElementsByName('name');
document.getElementById('id');
document.querySelector('.box');//参数是一个CSS选择器，获取第一个类名为box的元素
document.querySelectorAll('.box');//获取所有类名为box的元素

jQuery对象
jquery('button');
$('.bottom');

DOM对象转换成jqurey对象
var dv=document.getElemetsByTagName('div');
$(dv);

jqurey 对象转换成DOM对象
$('div').get(0);


e.pageX——相对整个页面的坐标
e.layerX——相对当前坐标系的border左上角开始的坐标
e.offsetX——相对当前坐标系的border左上角开始的坐标
e.clientX——相对可视区域的坐标
e.x——相对可视区域的坐标
pageX指鼠标在页面上的位置，以页面左侧为参考点
clientX指可视区域内离左侧的距离，以滚动条滚动到的位置为参考点。各个浏览器相同。
即当有滚动条时clientX  小于  pageX
console.log('eY'+e.pageY);	//距离页面最顶端
console.log('cY'+e.clientY);	//距离可视区域（不含滚动区域）最顶端

浏览器调试-source-watch-输入-ev|其他;可以监视某个属性

$(window).height();	//获取当前窗口高度。
$(document).height();	//获取当前文档高度。

'~~' 运算符等同于ParseInt();只不过能把false,true,undefined转换成对应的0和1：
~~"9.99"=9
~~'false'=0
~~'true'=1
~~undefined=0
~~!undefined=1




















