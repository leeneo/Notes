    /**
     * 返回当前日期的pgsql timestamp日期格式
     * @date 日期字符串 能用new Date()转换的字符串形式
     * */
    static GetPgDate(date?: string) {
        let currDate: any
        if (date) {
            currDate = new Date(date);
        } else {
            currDate = new Date();
        }
        let year = currDate.getFullYear();  //获取年
        let month: number | string = currDate.getMonth() + 1;  //获取月
        month = month < 10 ? '0' + month : month;  //判断月是否大于10
        let day: number | string = currDate.getDate();  //获取日
        day = day < 10 ? ('0' + day) : day;  //判断日期是否大10
        let hours: number | string = currDate.getHours();
        hours = hours < 10 ? ('0' + hours) : hours;
        let minutes: number | string = currDate.getMinutes();
        minutes = minutes < 10 ? ('0' + minutes) : minutes;
        let seconds: number | string = currDate.getSeconds();
        seconds = seconds < 10 ? ('0' + seconds) : seconds;
        let milliseconds: number | string = currDate.getMilliseconds();
        if (milliseconds < 10) {
            milliseconds = `00${milliseconds}`;
        } else if (milliseconds < 100) {
            milliseconds = `0${milliseconds}`;
        }

        var arr = currDate.toString().split("GMT");
        var end = arr[arr.length - 1]
        let header = end.substring(0, 3);
        let foot = end.substring(3, 5);
        return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}.${milliseconds}${header}:${foot}`;
    }

    /**
     * 处理服务端返回的PgSQL日期格式
     * @param dateStr 要处理的日期字符串
     * @return dateFormatStr 处理好的格式化日期字符串：yyyy-MM-dd HH:MM:SS
     */
    static DateFormatPgDate(dateStr: string): string {
        if (dateStr)
            return dateStr.split('T')[0] + ' ' + dateStr.split('T')[1].substring(0, 8);
        else
            return '';
    }

    /**
     * 将日期时间转换为长日期字符串：年-月-日：时:分:秒
     * 
     * @param dateTime 日期时间
     */
    static ToLongDateTimeString(dateTime: any): string {
        var date = new Date(dateTime);
        let second = date.getSeconds().toString();
        if (second.length == 1) {
            second = "0" + second;
        }
        return date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + " "
            + date.getHours() + ":" + date.getMinutes() + ":" + second;
    }

    /**
     * 将日期时间转换为短日期字符串：年-月-日
     * 
     * @param dateTime 日期时间
     */
    static ToShortDateString(dateTime: any): string {
        var date = new Date(dateTime);
        return date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate();
    }

    /**
     * 将普通字符串换为JSON'字符串   aa,bb'==>['aa','bb']     * 
     * @param str:string
     */
    static TurnStringToJson(str: string): string {
        if (str) {
            //替换中英文全半角','
            str = str.replace(/，/ig, ',');
            let arr: string[] = str.split(',');
            //去除空字符串元素
            for (let i = 0; i < arr.length; i++) {
                let item = arr[i];
                if (!item) {
                    arr.splice(arr.indexOf(item), 1);
                    i--;
                }
            }
            return JSON.stringify(arr);
        } else
            return "";
    }

    /**
     * 将JSON字符串转为普通字符串  ['aa','bb']==>'aa,bb'     * 
     * @param JSONStr
     */
    static TurnJsonStrToString(jstr: string): string {
        if (jstr) {
            let str = JSON.parse(jstr);
            return str.toString();
        } else
            return "";
    }
    
    
    /**
     * 计算以','分隔的字符串数量
     * @param posStr 字符串
     * @returns 返回数量
     */
    static SetPositionNum(posStr: string): number {
        if (posStr) {
            posStr = posStr.replace(/，/ig, ',');
            let posArr = posStr.split(',');
            for (let i in posArr) {
                let item = posArr[i];
                let exitflag = false;
                for (let j in posArr) {
                    let item2 = posArr[j];
                    if (i === j) {
                        continue;
                    }
                    if (item === item2) {
                        toastr.warning('字符串不允许重复');
                        exitflag = true;
                        break;
                    }
                }
                if (exitflag) break;
            }
            for (let i = 0; i < posArr.length; i++) {
                if (!(posArr[i].trim().length > 0)) {
                    posArr.splice(posArr.indexOf(posArr[i].trim()), 1);
                    i--;
                };
            }
            let qty = posArr.length;
            return qty;
        }
        return 0;
    }

    /**
     * 检测一个字符串数组中是否有重复字符串 ['12','23','12'] | '12,23,12'
     * @param posStr: string | Array.toString()
     * @returns 如果存在重复字符串时返回true
     */
    static CheckRepeatPosition(posStr: string): boolean {
        if (posStr) {
            posStr = posStr.replace(/，/ig, ',');
            let posArr = posStr.split(',');
            for (let i in posArr) {
                let item = posArr[i];
                if (!item) {
                    toastr.warning('字符串不允许为空');
                    return true;
                }
                
                for (let j in posArr) {
                    let item2 = posArr[j];
                    if (i === j) {
                        continue;
                    }
                    if (item === item2) {
                        toastr.warning('字符串重复!');                        
                        return true;
                    }
                }
            }
        }
        return false;
    }

    /**
     * 获取一组单选按钮，选中项的值
     * @param name radio name
     */
    static GetSelecteRadioValue(name: string): string {
        var val = $('input:radio[name="' + name + '"]:checked').val() as string;
        if (val)
            return val;
        return '';
    }
