===========================================================================================================================
Docker  运行原理
===========================================================================================================================
Docker 是一个Client-Server结构的系统，Docker的守护进程（Docker Daemon）运行在主机上,然后通过Socket连接从客户端访问，守护进程从客户端
接受命令并管理运行在主机上的容器。容器是一个包含镜像实例的运行时环境。

===========================================================================================================================
安装docker
===========================================================================================================================
Docker 分为 CE 和 EE 两大版本。 CE 即社区版（免费，支持周期 7 个月）， EE 即企业版，强调安全，付费使用，支持周期 24 个月
===========================================================================================================================
centos7 安装Docker    官方安装文档：https://docs.docker.com/engine/install/centos/
===========================================================================================================================   
1.卸载旧的docker(如果没有安装过，跳过此步)  
    sudo yum remove docker \
                    docker-client \
                    docker-client-latest \
                    docker-common \
                    docker-latest \
                    docker-latest-logrotate \
                    docker-logrotate \
                    docker-engine
2.安装依赖包          sudo yum install -y yum-utils device-mapper-persistent-data lvm2
3.加入阿里云镜像      sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
  或者使用官方镜像    sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
4.安装docker ce      sudo yum install docker-ce docker-ce-cli containerd.io
5.启动docker         systemctl start docker
6.设置开机自启动      systemctl enable docker
7.查看是否安装成功    docker run hello-world

===========================================================================================================================
Centos 解除安装 Uninstall Docker Engine
===========================================================================================================================
1.Uninstall the Docker Engine, CLI, and Containerd packages:
$ sudo yum remove docker-ce docker-ce-cli containerd.io

2.Images, containers, volumes, or customized configuration files on your host are not automatically removed. To delete all images, containers, and volumes:
$ sudo rm -rf /var/lib/docker

===========================================================================================================================
Docker 镜像加速   参考阿里云操作文档：https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors
===========================================================================================================================
网易镜像源：http://hub-mirror.c.163.com
阿里云镜像源：https://ypybd1i5.mirror.aliyuncs.com
===========================================================================================================================
Centos7 配置镜像加速器

针对Docker客户端版本大于 1.10.0 的用户

通过修改daemon配置文件/etc/docker/daemon.json来使用加速器

vim /etc/docker/daemon.json:
{
  "registry-mirrors": ["https://ypybd1i5.mirror.aliyuncs.com"]
}

创建或修改完毕：
sudo systemctl daemon-reload
sudo systemctl restart docker

docker info 查看Registry Mirrors 字符串

===========================================================================================================================
Windows10 win10 配置镜像加速器

在系统右下角Docker托盘图标内右键菜单选择 Settings，打开配置窗口后左侧导航菜单选择 Docker Engine。编辑窗口内的JSON串，填写下方加速器地址：
{
  "registry-mirrors": ["https://ypybd1i5.mirror.aliyuncs.com"]
}
编辑完成后点击 Apply 保存按钮，等待Docker重启并应用配置的镜像加速器。

Docker for Windows 有两种运行模式，一种运行Windows相关容器，一种运行传统的Linux容器。同一时间只能选择一种模式运行。

win10 以下版本  使用Docker Toolbox安装Docker，配置方法与Docker for Windows不同，详见文档。

docker info 查看Registry Mirrors 字符串

===========================================================================================================================
Docker进程管理
===========================================================================================================================
运行Docker
systemctl start docker

停止Docker
systemctl stop docker

重启Docker
systemctl restart docker

设置开机自启动 Docker
systemctl enable docker

===========================================================================================================================
Docker 核心架构、原理 (文件系统, 层, 容器)
===========================================================================================================================
Docker的文件系统分为两层:bootfs和rootfs;

bootfs包含了bootloader和Kernel（linux内核），内核启动之后，bootfs会被卸载掉。

rootfs则包含了一般系统上的常见目录结构，类似于/dev, /proc, /bin等等以及一些基本的文件和命令，实际上就是各种不同的Linux系统发行版。

Docker镜像用到的技术UnionFS。
UnionFS(联合文件系统)：一种分层、轻量级、并且高性能的文件系统。支持对文件系统的修改作为一次提交来一层层叠加，同时可以将不同的目录挂载到
同一个虚拟文件系统目录下，类似归档。

Docker容器实现隔离和资源限制用到的技术Linux namespace 、Linux CGroups。

Docker 镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部，这一层通常被称为容器层，容器层之下的都叫镜像层。
===========================================================================================================================
Docker  核心概念【镜像】【容器】【仓库】
===========================================================================================================================
镜像管理

镜像是一种轻量级、可执行的独立应用包，封装了应用运行时环境、代码和配置文件。
镜像可以看做一个只读的应用模版，可以创建不同的容器。
一个镜像可以有不同的tag。

docker pull [httpd]         拉取镜像
docker images               查看已有镜像
docker rmi [80db826108c5]   删除镜像

===========================================================================================================================
镜像制作

通过Dockerfile定制一个简单的Nginx镜像。

1.创建一个名为Dockerfile的文件。

mkdir mynginx
cd mynginx
touch Dockerfile

2.编辑Dockerfile

vim Dockerfile
增加文件内容如下：
FROM nginx
RUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html

Dockerfile指令介绍如下。以下仅介绍简单指令，如需了解更多，请参见官方网站https://hub.docker.com/。
FROM语句：表示使用nginx镜像作为基础镜像，一个Dockerfile中FROM是必备的指令，并且必须是第一条指令。
RUN语句：格式为RUN <命令>，表示执行echo命令，在显示器中显示一段“Hello, Docker!”的文字。

3.构建镜像

docker build -t nginx:v3 .
-t nginx:v3：指定镜像的名称和版本。
.：指定上下文路径，镜像构建命令将该路径下所有的内容打包给Docker引擎帮助构建镜像。

4.查看部署的nginx镜像，版本为v3

docker images

REPOSITORY          TAG             IMAGE ID              CREATED               SIZE
nginx               v3              09422e465d96          10 seconds ago        109 MB

5.上传自己的镜像到Docker Hub
docker tag imageName  {userName}/imageName
docker push {userName}imageName

===========================================================================================================================
容器管理

容器（container）是独立运行的一个或一组应用，容器是镜像的运行实例；一个镜像可以有不同的容器；可以看做是一个极简的Linux运行环境。
容器可以看做一层层的堆叠，只有最上面一层可以修改；

docker run --name containerName -it -p 80:80 imageName        创建一个指定容器并运行
docker run -it imageName /bin/bash                            创建并进入容器（此时第一次使用exit退出会导致容器关闭）
docker run -d  imageName                                      创建容器并以后台进程运行

参数说明如下：
-d：后台运行容器，并返回容器ID。
-p：端口映射，格式为“宿主机端口:容器端口”。
--name：为容器指定一个名称。

docker ps -a                       查看容器启动情况
docker exec -it mycore /bin/bash   进入容器
docker rm       name/Id            删除容器
docker start    name/Id            启动容器
docker restart  name/Id            重启动容器
docker stop     name/Id            关闭容器
docker kill     name/Id            强制关闭容器

ttY:
ctrl+p+q                           退出docker tty，不关闭容器        
exit(ctrl+p+q)                     退出docker tty，并关闭容器

在浏览器输入弹性云服务器所绑定的弹性公网IP，访问测试容器运行情况

===========================================================================================================================
仓库（Repository）  

集中存放镜像文件的场所，类似github Repository,分为公共仓和私有仓
最大的公共仓库  https://hub.docker.com

仓库注册服务器（Registry）：存放着多个仓库的服务器

===========================================================================================================================
Docker  部署Asp.net core web应用程序
===========================================================================================================================
1.拉取aspnetcore最新镜像
docker pull microsoft/aspnetcore                

如果我们想拉取指定的aspnetcore版本，可使用如下命令：
docker pull microsoft/aspnetcore:2.0

2.创建容器
docker run -it c4ca78cf9dca     
exit--退出容器

3.制作应用镜像
创建Dockerfile文件

cd /tmp
vi Dockerfile：                     --编辑 Dockerfile
FROM docker.io/microsoft/aspnetcore
WORKDIR /app
COPY . ./app
EXPOSE 8080
CMD ["dotnet", "leeneo.Web.dll"]

Dockerfile 说明：
FROM表示新镜像所依赖的基础镜像。
WORKDIR表示你的asp.net core web应用放在容器的哪个目录，这里是/app目录，没有会自动创建
COPY表示拷贝当前系统下的哪个目录，这里是songlou目录。
EXPOSE表示暴露出来的端口号，和容器的端口号对应。这里默认是80。
CMD表示执行的命令，即运行我们自己的asp.net core web程序。

4.创建镜像
docker build -t mycore .

5.运行容器
docker run -d -p 8080:80 --name mycoreContainer mycore

6.执行curl命令访问网站
curl http://localhost:8080

===========================================================================================================================
安装VIM
===========================================================================================================================
安装需要的环境，docker默认没有vim编译器–yum install vim
安装nginx–yum install nginx
窗口文件夹用于存放web项目–mkdir /var/webapps/html
修改nginx的nginx.config配置文件路径，改为项目的/var/webapps/html/dist
启动nginx–命令容器内：nginx。启动后外部可通过宿主机的ip：8888[上面设置的]访问了。

===========================================================================================================================
Docker 系统命令 --help
===========================================================================================================================
Usage:  docker [OPTIONS] COMMAND

A self-sufficient runtime for containers

Options:
      --config string      Location of client config files (default
                           "C:\\Users\\neo\\.docker")
  -c, --context string     Name of the context to use to connect to the
                           daemon (overrides DOCKER_HOST env var and
                           default context set with "docker context use")
  -D, --debug              Enable debug mode
  -H, --host list          Daemon socket(s) to connect to
  -l, --log-level string   Set the logging level
                           ("debug"|"info"|"warn"|"error"|"fatal")
                           (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default
                           "C:\\Users\\neo\\.docker\\ca.pem")
      --tlscert string     Path to TLS certificate file (default
                           "C:\\Users\\neo\\.docker\\cert.pem")
      --tlskey string      Path to TLS key file (default
                           "C:\\Users\\neo\\.docker\\key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit

Management Commands:
  builder     Manage builds
  config      Manage Docker configs
  container   Manage containers
  context     Manage contexts
  image       Manage images
  network     Manage networks
  node        Manage Swarm nodes
  plugin      Manage plugins
  secret      Manage Docker secrets
  service     Manage services
  stack       Manage Docker stacks
  swarm       Manage Swarm
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  build       Build an image from a Dockerfile
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  deploy      Deploy a new stack or update an existing stack
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  images      List images
  import      Import the contents from a tarball to create a filesystem image
  info        Display system-wide information
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  login       Log in to a Docker registry
  logout      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  run         Run a command in a new container
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  search      Search the Docker Hub for images
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  version     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes

===========================================================================================================================
Docker 基本命令
===========================================================================================================================
3.1、设置docker开机自启动–命令：sudo systemctl enable docker

3.2、docker重启动–命令：docker restart docker容器名

3.2、查看运行的容器–命令：docker ps 【正在运行的docker容器】

3.3、查看所有的容器–命令：docker ps -a【包含已经停止的容器】

3.4、指定容器启动–命令：docker start -i docker容器名

3.5、删除docker容器–命令：docker rm docker容器名

3.6、创建并启动docker容器–命令：docker run -p 0.0.0.0::8888:80 -it --name=sx centos /bin/bash

此处说明：设置docker容器端口映射四种方式：

3.6.1、docker run -p 80 -i -t centos /bin/bash 【该方式指定容器端口-宿主机端口随机】

3.6.2、docker run -p 8080:80 -i -t centos /bin/bash【该方式指定宿主机端口：容器端口】

3.6.3、docker run -p 0.0.0.0:80 -i -t centos /bin/bash 【该方式指定宿主机IP：容器端口】

3.6.4、docker run -p 0.0.0.0:8888:80 -i -t centos /bin/bash 【该方式指定宿主机IP：端口：容器端口】常用这种方式

通过3.6.4命令创建好容器后，外部可以通过访问宿主机IP：8080端口映射到docker容器的80端口。

3.7、守护式容器快捷退出键：CTRL+Q CTRL+P【此快捷键退出后，程序后台正常运行】

3.8、docker利用iptables防火墙技术实现用户IP权限访问。

3.9、查看docker信息–命令：docker inspect docker容器名

3.10、进入运行的docker容器–命令：docker attach docker容器

3.11、Linux与docker之间的文件传输–命令：

3.11.1:–宿主机Linux文件复制到容器docker中的命令：docker cp 要拷贝的文件路径 容器名：要拷贝到容器里面对应的路径

示例：docker cp /opt/test.js testtomcat：/usr/local/tomcat/webapps/test/js

3.11.2–docker容器复制到宿主机Linux中的命令：docker cp 容器名：要拷贝的文件在容器里面的路径 要拷贝到宿主机的相应路径

示例：docker cp testtomcat：/usr/local/tomcat/webapps/test/js/test.js /opt

3.12、查看所有TCP端口–命令：netstat -ntlp

4、docker容器部署vue前端web项目

4.1、进入docker容器：docker attach sx【docker容器名】
====================================================================================================================================
docker images --help
====================================================================================================================================
Usage:  docker images [OPTIONS] [REPOSITORY[:TAG]]

显示本机镜像

Options:
  -a, --all             显示本机所有的镜像
  -q, --quiet           只显示镜像ID  
      --digests         Show digests
      --no-trunc        Don't truncate output  

====================================================================================================================================
docker ps --help
====================================================================================================================================
Usage:  docker ps [OPTIONS]

显示本地容器

Options:
  -a, --all             Show all containers (default shows just running)
  -f, --filter filter   Filter output based on conditions provided
      --format string   Pretty-print containers using a Go template
  -n, --last int        Show n last created containers (includes all states) (default -1)
  -l, --latest          Show the latest created container (includes all states)
      --no-trunc        Don't truncate output
  -q, --quiet           Only display numeric IDs
  -s, --size            Display total file sizes

====================================================================================================================================
docker run --help
====================================================================================================================================
docker run [OPTIONS] IMAGE [COMMAND] [ARG...]

命令的默认 COMMAND 为 /bin/bash，因此用户的输入是基于 bash shell 执行的

--name string                    为容器指定一个名称
-d, -–detach	                   在后台运行容器，并且打印容器id。
-i, -–interactive	               在容器上打开一个标准的输入接口，一般与 -t 连用。
-t, -–tty	                       创建一个伪tty终端，连接容器的标准输入接口，一般与 -i 连用。
-P, --publish-all                随机端口映射，易受攻击
-p, --publish list               主机端口映射：Publish a container's port(s) to the host
    端口映射形式如下：
    hostPort:containerPort  (主要形式)
    ip:hostPort:containerPort
    ip::containerPort
    containerPort

====================================================================================================================================
docker search --help
====================================================================================================================================
Usage:  docker search [OPTIONS] TERM

在Docker Hub 上搜索镜像

Options:
  -f, --filter filter   Filter output based on conditions provided
      --format string   Pretty-print search using a Go template
      --limit int       Max number of search results (default 25)
      --no-trunc        显示完整的镜像描述（Description）

demo:
docker search --filter='stars=30' angular           搜索hub上stars>=30的镜像
docker search --filter=is-automated=true  nginx     搜索hub上automate build(自动构建)的镜像
====================================================================================================================================
docker rmi --help
====================================================================================================================================
Usage:  docker rmi [OPTIONS] IMAGE [IMAGE...]

删除一个或多个镜像

Options:
  -f, --force      Force removal of the image
      --no-prune   Do not delete untagged parents

删除多个：
 docker rmi -f image1 image2 image3...

组合images命令删除全部镜像：
 docker rmi -f  $(docker images -qa)

docker images -qa：查出全部的镜像ID

====================================================================================================================================
docker rm --help
====================================================================================================================================
Usage:  docker rm [OPTIONS] CONTAINER [CONTAINER...]

删除一个或多个容器

Options:
  -f, --force     Force the removal of a running container (uses SIGKILL)
  -l, --link      Remove the specified link
  -v, --volumes   Remove anonymous volumes associated with the container

删除多个：
 docker rm -f con1 con2 con3...

组合ps命令删除全部镜像：
 docker rm -f  $(docker ps -aq)

docker ps -aq：查出全部的容器ID

====================================================================================================================================
docker commit --help
====================================================================================================================================
Usage:  docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]

Create a new image from a container's changes

Options:
  -a, --author string    Author (e.g., "John Hannibal Smith <hannibal@a-team.com>")
  -c, --change list      Apply Dockerfile instruction to the created image
  -m, --message string   Commit message
  -p, --pause            Pause container during commit (default true)

====================================================================================================================================
docker push --help
====================================================================================================================================
Usage:  docker push [OPTIONS] NAME[:TAG]

Push an image or a repository to a registry

Options:
      --disable-content-trust   Skip image signing (default true)

====================================================================================================================================
docker logs --help
====================================================================================================================================
Usage:  docker logs [OPTIONS] CONTAINER

Fetch the logs of a container

Options:
      --details        Show extra details provided to logs
  -f, --follow         Follow log output
      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)
      --tail string    Number of lines to show from the end of the logs (default "all")
  -t, --timestamps     Show timestamps
      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)

demo:
docker run --name nginxc -d nginx /bin/sh -c "while true;do echo wfw;sleep 2;done"
docker logs -t -f --tail 3 nginxc

====================================================================================================================================
docker top --help
====================================================================================================================================
Usage:  docker top CONTAINER [ps OPTIONS]

Display the running processes of a container
====================================================================================================================================
docker inspect --help
====================================================================================================================================
Usage:  docker inspect [OPTIONS] NAME|ID [NAME|ID...]

检查容器内部细节  | Return low-level information on Docker objects

Options:
  -f, --format string   Format the output using the given Go template
  -s, --size            Display total file sizes if the type is container
      --type string     Return JSON for specified type

====================================================================================================================================
docker exec --help
====================================================================================================================================
Usage:  docker exec [OPTIONS] CONTAINER COMMAND [ARG...]

在容器中打开新的命令终端，可以直接在容器外执行容器内命令
Run a command in a running container

Options:
  -d, --detach               Detached mode: run command in the background
      --detach-keys string   Override the key sequence for detaching a container
  -e, --env list             Set environment variables
  -i, --interactive          Keep STDIN open even if not attached
      --privileged           Give extended privileges to the command
  -t, --tty                  Allocate a pseudo-TTY
  -u, --user string          Username or UID (format: <name|uid>[:<group|gid>])
  -w, --workdir string       Working directory inside the container

demo:
docker exec -t 6a9ded24fc93 ls -l

====================================================================================================================================
docker attach --help
====================================================================================================================================
Usage:  docker attach [OPTIONS] CONTAINER

必需是已经存在的命令终端  
Attach local standard input, output, and error streams to a running container

Options:
      --detach-keys string   Override the key sequence for detaching a container
      --no-stdin             Do not attach STDIN
      --sig-proxy            Proxy all received signals to the process (default true)
demo:
docker run --name nginxc -it nginx /bin/bash =>(ctrl+P+Q)
docker attach nginxc|id

====================================================================================================================================
docker cp --help
====================================================================================================================================
Usage:  docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-
        docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH

容器与宿主机之间复制文件或目录
Copy files/folders between a container and the local filesystem

Use '-' as the source to read a tar archive from stdin
and extract it to a directory destination in a container.
Use '-' as the destination to stream a tar archive of a
container source to stdout.

Options:
  -a, --archive       Archive mode (copy all uid/gid information)
  -L, --follow-link   Always follow symbol link in SRC_PATH

demo:
docker cp nginxc2:/./docker-entrypoint.sh /tmp

====================================================================================================================================
docker pause --help
====================================================================================================================================
Usage:  docker pause CONTAINER [CONTAINER...]

Pause all processes within one or more containers

====================================================================================================================================
docker unpause --help
====================================================================================================================================
Usage:  docker unpause CONTAINER [CONTAINER...]

Unpause all processes within one or more containers

====================================================================================================================================
docker commit --help
====================================================================================================================================
Usage:  docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]

Create a new image from a container's changes

Options:
  -a, --author string    Author (e.g., "John Hannibal Smith <hannibal@a-team.com>")
  -c, --change list      Apply Dockerfile instruction to the created image
  -m, --message string   Commit message
  -p, --pause            Pause container during commit (default true)

demo:
docker commit -a='leeneo' -m='test' a4fb84d31a52 learngingFromDocker/tomcat:0.1

====================================================================================================================================
docker push --help
====================================================================================================================================
Usage:  docker push [OPTIONS] NAME[:TAG]

Push an image or a repository to a registry

Options:
      --disable-content-trust   Skip image signing (default true)

====================================================================================================================================