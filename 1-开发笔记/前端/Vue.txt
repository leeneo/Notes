************************************************************************************************************************************
vue 生命周期
************************************************************************************************************************************
从new Vue()创建一个vue实例开始，到destroyed 截止。
Vue源码内部实现了从开始到结束（包含）以及中间的大部分流程。
流程槪示：
new Vue()=>init=>init=>has (el|template)options?=>compile(el|template)=>create vm=>mounted=>teardown(拆卸)=>destroyed

生命周期函数：
beforeCreate()
created()
beforeMount()
mounted()
beforeUpdate()
updated()
beforeDestroy()
destroyed()

************************************************************************************************************************************
使用 vue  cli3 以上创建的项目，如果需要添加自定义配置，在项目根目录下手动添加一个 vue.config.js 文件：
module.exports={}
************************************************************************************************************************************
1,npm install vue-router --save
2,Vue.use(); 安装插件 //Vue.use(VueRouter)

************************************************************************************************************************************
router 路由的使用
************************************************************************************************************************************
import Vue from 'vue'
import VueRouter from 'vue-router'
import Home from '../views/Home.vue'

// 通过Vue.use(VueRouter) 安装VueRouter
Vue.use(VueRouter)

// 创建路由表：配置路由和组件间的映射关系
const routes = [
  {
    path: '/',
    name: 'Home',
    component: Home
  },
  {
    path: '/about',
    name: 'About',
    component: () => import(/* webpackChunkName: "about" */ '../views/About.vue')
  }
]

// 创建 VueRouter 对象
const router = new VueRouter({
  mode: 'history',
  routes
})

// 导出 VueRouter 对象
export default router

最后通过在App.vue中使用 <router-link/>(设置跳转) 和<router-view/>(设置组件显示位置) 来使用路由
************************************************************************************************************************************
<router-link/> 的标签属性

tag: 设置渲染成的标签元素button/div等，默认是<a>标签
replace: 设置history的state 为replaceState,使浏览器返回按钮失效
active-class:可修改激活元素的属性标志，只针对该标记有效，若要统一修改可在 vue-router 中添加 linkActiveClass 项

*可利用 <router-link> 激活元素的 router-link-active 属性设置激活元素的样式 
************************************************************************************************************************************
this.$router vs this.$route 

this.$router: new 出来的 VueRouter 对象，包含一系列的配置，以及一个 routes（路由表） 集合
this.$route: 表示当前激活的路由对象，routes 对象中的一个，即当前url显示的那个路由
************************************************************************************************************************************
动态路由
一种模式下的动态匹配，类似/user/foo，/user/bbb，都将匹配同一个user路由
{
    path: '/user/:id',
    name: 'User',
    component: () => import('../views/User.vue')
},

************************************************************************************************************************************
懒加载（一个路由对应一个组件，一个组件封装一个JS，只有当该组件的路由被访问时，才加载对应的JS）

把不同的组件分割成独立的代码块，当某个路由被访问时，才加载这个组件。
避免加载首页时全部加载所有文件，以实现更好的用户体验。

vue 路由懒加载的写法：component: () => import('../views/User.vue')
************************************************************************************************************************************
router 路由传参的几种方式

1.布尔模式，在组件中使用$route.params，这种方式会使组件与对应路由形成高耦合，使用props 解耦
const User = {
  template: '<div>User {{ $route.params.id }}</div>'
}

*使用props 解耦，如果 props 被设置为 true，route.params 将会被设置为组件属性。
const User = {
  props: ['id'],
  template: '<div>User {{ id }}</div>'
}
const router = new VueRouter({
  routes: [
    { path: '/user/:id', component: User, props: true }
  ]
})

2，query，通过url query 传参, $route.query 取参
<router-link :to="{path:'/profile',query:{name:'leeneo',age:'28',id:'111'}}" replace>Profile</router-link>
const Profile = {
  template: '        
        <ul>
            <li>{{$route.query.name}}</li>
            <li>{{$route.query.age}}</li>
        </ul>
}

3，对象模式，如果 props 是一个对象，它会被按原样设置为组件属性。当 props 是静态的时候有用。
const router = new VueRouter({
  routes: [
    {
      path: '/promotion/from-newsletter',
      component: Promotion,
      props: { newsletterPopup: false }
    }
  ]
})

4.函数模式，创建一个函数返回 props
const router = new VueRouter({
  routes: [
    {
      path: '/search',
      component: SearchUser,
      props: route => ({ query: route.query.q })
    }
  ]
})

*此外还可以通过组件内自定义函数的方式修改路由并传参
const User = {
    methods: {
      userClick() {
          this.$router.replace("/user/" + this.id);
        },
        profileClick() {
          this.$router.replace({
            path: "/profile",
            query: {
              name:'leeneo',
              age:28
            },
          });
        }
    }
}
  

************************************************************************************************************************************
$router $route 的定义：
Object.defineProperty(Vue.prototype,'$router',{get(){return new VueRouter(){}}});
Object.defineProperty(obj.prototype,'aaa',{}) 等效于 obj.prototype.aaa={};
************************************************************************************************************************************
keep-alive: 缓存页面状态

正常情况下，从一个路由跳到另一个路由，上一个组件的生命周期即结束，重新回到之前的路由会重新开始一个新的生命周期，
如果要缓存之前页面的状态，避免重复创建组件，可以使用 keep-alive：
    <keep-alive>
      <router-view />
    </keep-alive>

    或者组件元数据中：keepAlive:true

include - 字符串或正则表达式。只有名称匹配的组件会被缓存。
exclude - 字符串或正则表达式。任何名称匹配的组件都不会被缓存。

*keepAlive 为true时，生命周期内可以使用 activated() deactivated() 两个生命周期函数。
************************************************************************************************************************************
webpack 设置路径别名

webpack.base.conf.js:
  resolve: {
    extensions: ['.js', '.vue', '.json'],
    alias: {
      '@': resolve('src'),
      'assets': resolve('src/assets'),
      'components': resolve('src/components'),
      'views': resolve('src/views'),
    }
  },

别名的使用：HTML模板中使用'~alias', import中使用'@'或者'alias'
  <img slot="item-icon" src="~assets/img/tabbar/home.png" alt="" />
  import TabBar from "@/components/tabbar/TabBar";
  import TabBarItem from "components/tabbar/TabBarItem";
************************************************************************************************************************************
vuex 是一个为 vue 应用开发的集中式状态管理插件，属于生产时依赖

概念：可以简单的理解为把需要多个组件间共享的变量全部存储在一个对象里面。然后把这个对象放在顶层的vue实例中，让其他组件可以访问使用。
类似于在vue实例原型上添加一个公共变量:
Vue.prototype.commonObj={};

vuex  特性：响应式
虽然可以自己封装一个对象来管理公共变量，但很难做到响应式，所以会用到 vuex。

*vuex 就是一个在多个组件间共享状态的插件，并且可以响应式改变和跟踪这些状态。

需要使用vuex的地方：
用户的登录状态，用户信息（ID,名称，头像，），地理位置信息等等
购物车，收藏夹，对比信息

安装 npm install vuex --save

使用 vuex (主要是使用 vuex 中的 store 对象)：
1.新建store/index.js:   //把需要在组件间共享的变量定义在 soter 中
import Vue from 'vue'
import Vuex from 'vuex'
Vue.use(Vuex)
export default new Vuex.Store({
  state: {
    counter: 0
  }
});

2.main.js:
import store from './store' //引入并在 vue 实例中配置 store 对象。
new Vue({
  el: '#app',
  store,
  router,
  render: h => h(App)
})
************************************************************************************************************************************
vuex 状态管理流程

Vuex 状态相关：Actions,Mutaions,State
Actions(commit)-->Mutations(mutate-突变)-->State(render)-->Vue components(dispatch-发送)-->Actions(异步时使用)/Mutations
Backend API 通过 Actions 与 Vuex 进行交互
DevTools 通过 Mutations 与 Vuex 进行交互
Vue components 通过 Actions（异步时使用）、Mutations 修改 State 与 Vuex 进行交互
*Vue components 也可以直接修改State，但这样的操作 DevTools 跟踪不到，所以官方不建议这样做。

单界面的状态管理：State(存储变量)->View(信息展示)->Action(用户操作)->State(改变后变量)
************************************************************************************************************************************
vuex 核心概念

State,Getters,Mutation,Action,Module

************************************************************************************************************************************
使用vue-resource 或者axios 获取 api 接口数据


************************************************************************************************************************************
用户验证 token 处理

https://www.cnblogs.com/lone5wolf/p/14865572.html
https://www.jianshu.com/p/aaa1427b9517
https://blog.csdn.net/weixin_47485418/article/details/109434789

基于token的使用，需要考虑如下情况：

进入页面，页面内同时发起多个API调用
用户在页面中执行操作，操作中发起多个API调用，例如：提交表单
调用API，本地没有token，打开登录页
调用API，本地有token，API调用返回token已经过期，打开登录页
调用API，其他请求正在获取token，停止或取消调用
调用认证API，不添加token
登录成功后，保存获得的token，关闭登录，重新发起API调用
这里面临几个技术问题：

前端本地存储token；
区分API调用是否需要添加token；
如果同时发出多个请求，当其中的一个已经开始获取token，如何取消或暂停其它请求；
登录后完成后，如何自动回到之前的状态。

************************************************************************************************************************************
web 安全问题

https://blog.csdn.net/java_tang_shi_wen/article/details/115027687
************************************************************************************************************************************