EFCore执行Sql语句的方法：FromSql与ExecuteSqlCommand

在EFCore中执行Sql语句的方法为：FromSql与ExecuteSqlCommand；在EF6中的为SqlQuery与ExecuteSqlCommand，而FromSql和SqlQuery有很大区别，FromSql返回值为IQueryable，因此为延迟加载的，可以与Linq扩展方法配合使用，但是有不少的坑(EFCore版本为1.1.0)，直接执行Sql语句的建议不要使用FromSql，但是EFCore中并没有提供SqlQuery方法，因此下面会贴出SqlQuery的实现代码供大家参考，以便在EFCore中能使用。

*EF6 SqlQuery与ExecuteSqlCommand的用法：有返回结果集的查询等推荐使用SqlQuery，无返回结果集执行存储过程等推荐使用ExecuteSqlCommand

 SqlParameter[] pr = {
                            new SqlParameter("@as_bill_no", 'AAAAA'),            
                            new SqlParameter("@as_err",System.Data.SqlDbType.NVarChar,255){Direction=System.Data.ParameterDirection.Output,Value=""},
                        };

SqlQuery用法：
//SqlQuery如果不加泛型是无法使用FirstOrDefault()方法的
var r = db.Database.SqlQuery("Usp_insert_Billb1_pay @as_bill_no,@as_err out", pr); //正常，不推荐
var r = db.Database.SqlQuery("Usp_insert_Billb1_pay @as_bill_no,@as_err out", pr).FirstOrDefault(); //报错
var r = db.Database.SqlQuery<ProcedureReturn>("Usp_insert_Billb1_pay @as_bill_no,@as_error out", pr).FirstOrDefault(); //正常，不推荐

//返回查询SM_Pay_log表的结果集到对应实体，推荐方式
var results = db.Database.SqlQuery<SM_Pay_log>("select * from sm_pay_log").ToList();

ExecuteSqlCommand 用法：
//ExecuteSqlCommand 返回受影响的结果集行数（n 行受影响），无法使用泛型
int rows=db.Database.ExecuteSqlCommand("Usp_insert_Billb1_pay @as_bill_no,@as_err", pr);    //返回n，执行proc或者update&insert，推荐方式
int rows = db.Database.ExecuteSqlCommand("select * from sm_pay_log");   //查询成功，返回-1,查询语句，不推荐

string result = pr[1].Value.ToString(); //得到OutPut类型值

*EF Core中可以在使用关系数据库时下降到原始 SQL 查询，也就是FromSql
原生 SQL 查询
//通过 Entity Framework Core 可以在使用关系数据库时下降到原始 SQL 查询。 这在无法使用 LINQ 表达要执行的查询，或因使用 LINQ 查询导致低效的 SQL 被发送到数据库时非常有用。 原始 SQL 查询可返回实体类型
//结果集中的列名必须与属性映射到的列名匹配。 请注意，这与 EF6 不同，EF6 中忽略了原始 SQL 查询时的属性/ 列映射关系，只需结果集列名与属性名相匹配即可

1，基于原生 SQL 查询
var blogs = context.Blogs
    .FromSql("SELECT * FROM dbo.Blogs")
    .ToList();

2，也可用于执行存储过程
var blogs = context.Blogs
    .FromSql("EXECUTE dbo.GetMostPopularBlogs")
    .ToList();

3，带参数查询
var user = "johndoe";
var blogs = context.Blogs
    .FromSql("EXECUTE dbo.GetMostPopularBlogsForUser {0}", user)
    .ToList();
var user = "johndoe";

4，EF Core 2.0 及更高版本支持的字符串内插语法
var blogs = context.Blogs
    .FromSql($"EXECUTE dbo.GetMostPopularBlogsForUser {user}")
    .ToList();

5，还可以构造 DbParameter 并将其作为参数值提供
var user = new SqlParameter("user", "johndoe");
var blogs = context.Blogs
    .FromSql("EXECUTE dbo.GetMostPopularBlogsForUser @user", user)
    .ToList();

/*CURD*/

string json = Request["data"];
ct_parametre value = JsonConvert.DeserializeObject<ct_parametre>(json);

*增
db.Entry<ct_parametre>(value).State = System.Data.Entity.EntityState.Added;
if (db.SaveChanges() > 0)
    return RetMsg.Success(value);

*改
db.ct_parametre.Add(value);
if (db.SaveChanges() > 0)
    return RetMsg.Success(value);


当IDENTITY_INSERT设置为OFF时，无法为标识列插入显式值的处理办法
主键字段上加上[Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]，如：
    public class PM_Project
    {
        [Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public decimal ProjectID { get; set; }
    }

#region 使用 BeginTransaction 和多个 DbContext 的执行策略和显式事务。
//EF Core 具有两个重要功能，使其有别于 Dapper ，并且增加其性能开销。 第一个功能是从 LINQ 表达式转换为 SQL。 将缓存这些转换，但即便如此，首次执行它们时仍会产生开销。 第二个功能是对实体进行更改跟踪（以便生成高效的更新语句）。 通过使用 AsNotTracking 扩展，可对特定查询关闭此行为。 EF Core 还会生成通常非常高效的 SQL 查询，并且从性能角度上看，任何情况下都能完全接受，但如果需要执行对精确查询的精细化控制，也可使用 EF Core 传入自定义 SQL（或执行存储过程）。 在这种情况下，Dapper 的性能仍然优于 EF Core，但只有略微优势。
////var strategy = _context.Database.CreateExecutionStrategy();
//await strategy.ExecuteAsync(async () =>
//{
//    // Achieving atomicity between original Catalog database operation and the
//    // IntegrationEventLog thanks to a local transaction
//    using (var transaction = _context.Database.BeginTransaction())
//    {
//        _context.PM_Contact.Update(contact);
//        await _context.SaveChangesAsync();

//        // Save to EventLog only if product price changed
//        //if (raiseProductPriceChangedEvent)
//        //    await _integrationEventLogService.SaveEventAsync(priceChangedEvent);
//        transaction.Commit();
//    }
//});
#endregion

#region Linq 带条件查询
//var customers = _context.PM_Customer.Select(x => x.IsActive == "Y");
//var customers2 = _context.PM_Customer.Select(b => new PM_Customer
//{
//    Customerid = b.Customerid, //此处定义的字段名要与PM_Customer中定义的名字、个数一致，否则自动填充为null或default value
//    CustomerName = b.CustomerName,
//    IsActive = b.IsActive,
//    //Validdate=b.Validdate,
//    status = b.status
//});
#endregion

#region Linq 排序查询
var res = from a in db.wxIndexMenu orderby a.OrderID descending         //查询中排序，descending 降序
            //where a.IsActive == "Y"                      
            select a;
//return res.OrderByDescending(x => x.OrderID).ToList();                //结果中排序，OrderByDescending() 降序
return res.ToList();
#endregion
