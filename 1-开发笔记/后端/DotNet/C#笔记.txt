===========================================================================================================================

C#修饰符之类修饰符：public、internal、 partial、abstract、sealed、static

C#修饰符之成员修饰符：public、protected、private、internal、sealed、abstract、virtual、override、readonly、const
public 任何地方都可以调用
internal 同一应用程序集内部
private 只能在当前类中调用，私有的
protected 可以被子类调用
protected internal 可以被子类及同一程序集的其他类调用

访问级别修饰符：public、internal、 protected、private、protected internal
外部类访问级别只能声明为public或internal,内部类可以声明为private 

默认访问级别：
类             internal    class A==>internal class A
成员和嵌套类    private     funA()==>private funA()
构造函数        private
析构函数        private     不能显示使用访问修饰符

嵌套类访问
static成员与非static成员的访问：与普通类static or non-static成员的访问方法是一致的。
关于访问限制：内部类可以访问外部类的任何访问级别的成员（public, internal）；
而外部类只能访问内部类的public 或者internal级别的成员，不能访问内部类protected和private级别的成员。

可通过类名.类名，访问某个嵌套类，需注意访问级别限制，嵌套类不加修饰默认为private
public A{
    public C{}
}
public B{
    Main(){
        var c=new A.C();
    }
}


*析构函数:
与构造函数相反，用于实例的回收
析构函数的名字由符号“～”加类名组成
class First                     
{
    ~First()                    // 析构函数
    {
        Console.WriteLine("~First()析构函数");
    }
}

基类的可访问级别不能低于子类,重写基类的成员（virtual,abstract）时，访问级别需与基类保持一致
用base调用基类的构造函数时，必需保证基类的构造对子类可见（public,protected,internal）

Sealed：修饰类时表示该类不能够被继承，修饰属性或方法时需与override连用，表示该方法在当前子类中仅能重写一次，不能进一步被该子类的派生类重写。

结构是隐式密封的；因此它们不能被继承

===========================================================================================================================
类&接口&继承&多态(virtual,abstract,override)
注：多态不能用于静态，静态不能实例化，因而没有多态特性

virtual:virtual只能用于修饰方法或属性，必需有默认的方法体，方法体内可以什么都不写，virtual可以被子类重写。

abstract:abstract关键字可以修饰方法，属性或类，抽象方法或属性不能有方法体（get,set访问器不能有方法体）。abstract成员必须被子类重写。
如果类的属性或方法是抽象的，那么该类也必然是抽象的。
abstract类只能被继承,不能够被实例化

tips:
接口和抽象类最本质的区别：抽象类是一个不完全的类，是对对象的抽象，而接口是一种行为规范。
如果要重写基类中的方法，则基类中的方法必需用virtual或abstract修饰
虚拟成员或抽象成员不能是私有的，即：abstract,virtual 前面不能加private，sealed修饰符，或不加访问修饰符（类成员不加修饰符默认为private）

base 关键字用于从派生类中访问基类的成员：
调用基类上已被其他方法重写的方法(不能是抽象方法)==>：
B继承A,override B.Hello(){base.Hello();}
指定创建派生类实例时应调用的基类构造函数==>
public B():base()
基类访问只能在构造函数、实例方法或实例属性访问器中进行

===========================================================================================================================

msdn中文API： https://docs.microsoft.com/zh-cn/

例：class Microsoft.Extensions.DependencyInjection.ServiceCollection
Inheritance 继承类:Object -> ServiceCollection
Implements 实现接口:IServiceCollection

例：interface Microsoft.Extensions.DependencyInjection
Derived 派生类:Microsoft.Extensions.DependencyInjection.ServiceCollection
Implements 实现接口:ICollection<ServiceDescriptor> IEnumerable<ServiceDescriptor> IList<ServiceDescriptor>
===========================================================================================================================


apiclient.invoke 方法 可以直接调用DAL中的查询类方法,参数是一个json 类的model。
var BindCard = ApiClient.Invoke<List<regcard>>("DCard", "GetMemberCard", openID, false);
T.PageSize = 10;
                T.s_account_no = T.s_account_no;
                 T.s_code = s_code;
                T.s_account_no = card.s_account_no;
                var query = ApiClient.Invoke<DataTables<MemberPrepaidDebitLog>>("DCard", "GetCardAccountLog", T);
apiclient.get 方法通过调用api控制器来间接查询数据，参数可通过拼接字符串的方式传递
ResponseData<List<Report_SellOut>> res = JsonConvert.DeserializeObject<ResponseData<List<Report_SellOut>>>(ApiClient.Get("/Report/SellOutTotal?" + "Bdate=" + data.Bdate + "&Edate=" + data.Edate + "&Type=" + data.Type));
            return View(res.data);

T 泛型 ，通用数据类型修饰符，实例化时必需指定具体类型
<T> 泛型约束符，实例化时指定具体的类型

public DateTime? _time=null;
"?" 问号表示允许为空；

C#中“？”有三种用法。
1、可空类型修饰符(？)：引用类型可以使用空引用表示一个不存在的值，而值类型通常不能表示为空，例如:string str=null;是正确的。int i=null；编译器将报错。为了使值类型也可为空，可空类型出现了，可空类型使用可空类型修饰符？来表示，表现形式为T?。例：int?表示是可空的整形，DateTime?表示为可空的时间。T?其实是System.Nullable<T>（泛型结构）的缩写形式，也就意味着当你用到T？时编译器在编译时会把T？编译成System.Nullable<T>的形式，例如：int?,编译后便是System.Nullable<int>的形式。更多细节待续……。

2、三元（运算符）表达式(条件:表达1？表达式2)  先判断条件表达的值是否为true,条件为真，执行表达式1；条件为假，执行表达式2。
a=3>4?3:4;输出为4。
a=3<4?3:4;输出为3。

3、空合并运算符(？？)：用于定义可空类型和引用类型的默认值。如果此运算符的左操作数不为 null，则此运算符将返回左操作数；否则返回右操作数。 例：a??b,当a为null时则返回b,a不为空时返回a本身。空合并运算符为右结合运算符，即操作时从右向左进行组合的。如，“a??b??c”的形式按“a??(b??c)”计算


lamda表达式=>匿名函数
param=>param*2 等价于
fn(int param){
   return param*2;
}
* => 兰姆达表达式，可解读为“goes to”，.net 3.5的新语法。左侧是输入参数（如果有），右边包含表达式或语句块。

Lambda 表达式是一种可用于创建委托或表达式目录树类型的匿名函数。通过使用 lambda 表达式，可以写入可作为参数传递或作为函数调用值返回的本地函数。Lambda 表达式对于编写 LINQ 查询表达式特别有用。

若要创建 Lambda 表达式，需要在 Lambda 运算符 => 左侧指定输入参数（如果有），然后在另一侧输入表达式或语句块。例如，lambda 表达式 x => x * x 指定名为 x 的参数并返回 x 的平方值

=> 运算符具有与赋值运算符 (=) 相同的优先级并且是右结合运算


1．关于bin目录和obj目录
Bin目录用来保存项目生成后程序集，它有Debug和Release两个版本，分别对应的文件夹为bin/Debug和bin/Release，这个文件夹是默认的输出路径，我们可以通过：项目属性—>配置属性—>输出路径来修改。
obj目录是用来保存每个模块的编译结果，在.NET中，编译是分模块进行的，编译整个完成后会合并为一个.DLL或.EXE保存到bin目录下。因为每次编译时默认都是采用增量编译，即只重新编译改变了的模块，obj保存每个模块的编译结果，用来加快编译速度。是否采用增量编译，可以通过：项目属性—>配置属性—>高级—>增量编译来设置。
2．“是否复制到本地”的设置问题
在添加引用时，.NET会记录添加的引用绝对路径，这些设置保存在“每用户”文件中，（Solution.csproj.user），可以通过记事本打开查看。也可以在：项目属性—>通用属性—>引用路径里面查看。如果设置复制到本地为true，在生成项目时会自动拷贝该DLL到项目生成文件夹中(bin目录)，否则不会拷贝。在生成项目时，对所添加的引用的是绝对路径，而在运行时程序集默认只在当前所在的路径下去找。要修改引用的路径，必须通过编程的方法去实现。使用References 对象。
具体参见：
http://msdn.microsoft.com/library/chs/default.asp?url=/library/CHS/vbcon/html/vblrfaddmethodreferences.asp


#region regionName
代码块
#endregion

#region 大纲功能折叠，使在大纲功能预览时，代码看起来更简洁


/* 异步函数的执行方式：
*  public async Task ExecAsync(){}
*  1，await x.ExecAsync()（将所在函数声明为async）
*  2，x.ExecAsync().Wait()
*/

C# 7.1(目前仅.net core 2.0 支持)：
1,可以使用 async 关键字标记 Main 方法（应用程序入口点）。
2,推断的元组名称。
3,默认表达式。

string.Compare(String strA, String strB, bool ignoreCase)：比较strA和strB的值是否相等；为真返回0，假返回-1；可以比较为null的值;ignoreCase为true时，忽略比较大小写；为false时，值相同但大小写不一致返回1；
web.config:<add key="IsDebug" value="true" />
string.Compare(ConfigurationManager.AppSettings["IsDebug"], "true", true) ;     ==>返回 0
string.Compare(ConfigurationManager.AppSettings["IsDebug"], "false", true) ;    ==>返回-1
string.Compare(ConfigurationManager.AppSettings["IsDebug"], "null", true) ;     ==>返回-1

空白字符判断，string.IsNullOrWhiteSpace VS string.IsNullOrEmpty
string.IsNullOrEmpty 只对无空格“”空字符有效
//update TicketDetail set Openid=' ' where AutoID='2'
if (!string.IsNullOrWhiteSpace(td.OpenID)) 
    return Json(new { success = false, msg = "这张套票已经被领取了~" });    //不会执行
if (!string.IsNullOrEmpty(td.OpenID))
    return Json(new { success = false, msg = "这张套票已经被领取了~" });    //会执行

匿名类&Json的结合使用
语法：var obj=new{Name=value};

//非控制器类内部使用
return Newtonsoft.Json.JsonConvert.SerializeObject(new Results(-1, ex.InnerException.Message));
return Newtonsoft.Json.JsonConvert.SerializeObject(new { code = -1, msg = ex.InnerException.Message });
//控制器类内部使用
JsonResult System.Web.Mvc.Json
return Json(new Results(-1, as_bill_no));
return Json(new { success = false, msg = "找不到此参数，请刷新后重试。" });

// 加上此条件：where T : class ，下行代码会报类型错误：T必须是引用类型
    var res = ApiClient.Get<bool>("/neworder/del/" + id);

    public static T Get<T>(string url)
    {
            return default(T);
    }
    public static T Get<T>(string url) where T : class
    {
            return default(T);
    }

执行动态SqlQuery查询语句，多次使用同一个SqlParameter（数组或集体就会报）时报“另一个 SqlParameterCollection 中已包含 SqlParameter”错误
EN：The SqlParameter is already contained by another SqlParameterCollection
{
    string sql = "Usp_wx_binding_Card @as_WeChatId,@as_telno,@as_cardno,@as_password,@as_type,@as_error out";
    string result = "";
    
    var param = new List<SqlParameter>();
    param.Add(new SqlParameter("@as_WeChatId", request.as_WeChatId));
    param.Add(new SqlParameter("@as_telno", request.as_telno));
    param.Add(new SqlParameter("@as_cardno", request.as_cardno));
    param.Add(new SqlParameter("@as_password", request.as_password));
    param.Add(new SqlParameter("@as_type", request.as_type));
    param.Add(new SqlParameter("@as_error", SqlDbType.NVarChar, 255) { Direction = ParameterDirection.Output, Value = request.as_error });

    var results = context.Database.
    
    
    <ProcedureReturn>(sql, param.ToArray()).FirstOrDefault();
    result = param[5].Value.ToString(); //得到OutPut类型值

    解决方案（第二次执行使用clone语法）：
    var results = db.Database.SqlQuery<ProcedureReturn>(sql, param.Select(x => ((ICloneable)x).Clone()).ToArray()).FirstOrDefault();
    bResult = param[5].Value.ToString(); //得到OutPut类型值
}

=================================================================================================================================
EntityState.Modified 再 SaveChanges 与直接SaveChanges 的区别

1，会更新实体所有字段
db.Entry(member).State = EntityState.Modified;
db.SaveChanges();

2，只更新修改的字段
regcard.s_tel = bRegcard.s_tel;
db.SaveChanges();

=================================================================================================================================
global::System  别名
global 是 C# 2.0 中新增的关键字，理论上说，如果代码写得好的话，根本不需要用到它。
假设你现在写了一个类，名字叫 System。那么当你再在代码里写 System 的时候，编译器就不知道你是要指你写的 System 类还是系统的 System 命名空间，而 System 命名空间已经是根命名空间了，无法再通过完全限名来指定。在以前的 C# 版本中，这就是一个无法解决的问题。现在，可以通过
global::System
来表示 System 根命名空间，而用你自己的
MyNamespace.System
来表示自己的类。
当然，这种情况不应该出现，你不应该写一个名为 System 的类。

=================================================================================================================================
var ids=[0001,0002,0003,0004];
var stus=students.Where(x=>ids.Contains(x.Id)).ToList();
var x=new List<Test>();
List<IGrouping<int,Test>> x2=x.GroupBy(x=>x.Type).Where(y=>y.Count()>0).ToList();
x2.ForEach(x=>{
    var type=x.Key;
    var groupStudents=x.OrderBy(x=>x.Name).ToList();
})


