=================================================================================================================================
安装C语言编译环境：

使用MinGw GNU套件安装gcc
(确保gcc.exe路径在系统环境内)
gcc --h
gcc -v

编译-->gcc test.c -o test

执行：
cmd-->x.exe | x
powershell-->.\x.exe | .\x

=================================================================================================================================
#include <file> 与 #include "file" 的区别

#include <> :编译程序会先到标准函数库中找文件 

指示预处理程序先到预定义的缺省路径下寻找文件。预定义的缺省路径通常是在INCLUDE环境变量中指定的，请看下例： 
INCLUDE=C:\COMPILER\INCLUDE；S:\SOURCE\HEADERS；编译程序将首先到C:\COMPILER\INCLUDE目录下寻找文件；如果未找到，则到S:\SOURCE\HEADERS目录下继续寻找；如果还未找到，则到当前目录下继续寻找。

#include "" :编译程序会先从当前目录中找文件

指示预处理程序先到当前目录下寻找文件，再到预定义的缺省路径下寻找文件。

*GNU标准头文件路径
...\mingw32\lib\gcc\i686-w64-mingw32\版本号\include
...\mingw32\i686-w64-mingw32\include

=================================================================================================================================
中文乱码问题解决方案

win环境下源码用GBK保存正常
=================================================================================================================================
格式化输出排版
=================================================================================================================================
%d %2d %02d %.2d %nd %-nd

%d：十进制整数，普通格式
0 1 2
10 11 12

%2d：表示至少显示2位字符宽度，位数不足时 左边 补空格，右对齐
 0  1  2
10 11 12


%02d：表示至少显示2位字符宽度，位数不足时 左边 补0，右对齐
00 01 02
10 11 12

%.2d：同%02d
00 01 02
10 11 12

%nd:  表示至少显示2位字符宽度，位数不足 左边 补空格，右对齐
%-nd: 表示至少显示2位字符宽度，位数不足 右边 补空格，左对齐

*scanf中使用%nd:截取输入的前n位数。

*%*2d:表示忽略此处输入的2位字符
例：scanf("%2d%*2d%2d", &ix, &y) ==> 输入1234567,x=12,y=56,34被省略了。

=================================================================================================================================
%f %.2f %m.nf

%f          输出全部小数位
%.2f        仅保留两位小数位，超出两位四舍五入，不足两位补0。
%m.nf       仅保留n位小数，小数位超出部分四舍五入；至少显示m位字符宽度，左边 补空格，右对齐。
%-m.nf      仅保留n位小数，小数位超出部分四舍五入；至少显示m位字符宽度，右边 补空格，左对齐。

*注意：scanf 时一般尽量不要使用字符宽度或者格式控制，影响输入数据精度，字符宽度和格式控制应该仅在输出时排版使用。

=================================================================================================================================
转义字符

%：%%

=================================================================================================================================
bool 类型 true false
=================================================================================================================================
有些gcc编译环境或者linux下不识别 bool 类型，和true flase 。
解决方案：
头文件中引入 #include <stdbool.h>  
如果还不行，改用0 和 1 代替，0=false,1=true;

=================================================================================================================================
scanf 输入函数
=================================================================================================================================
用法：scanf("%d %f",&val);
注意：scanf 中不需要格式化

scanf("%d%d",&a,&b);  ==> 输入 100 101，中间用空格隔开
scanf("%d,%d",&a,&b); ==> 输入 100,101，中间用','空格隔开

=================================================================================================================================
printf 输出函数

用法：printf("%d %f",&val);
可以使用%nd, %0nd, %.nf 控制输出格式

=================================================================================================================================
函数
=================================================================================================================================
所有自定义函数要放在main函数之前，否则编译报错。

如果要在main函数之后定义函数，需要在main函数之前加前置声明。

函数声明：
int fun(int);   //分号不能省略，返回类型和参数要与函数体一致；
int main(){}
int fun(int){return 0}

自定义函数声明调用顺序：
函数a调用函数b;b要在a之前定义；

库函数声明是通过 #include <*.h> 来实现的

=================================================================================================================================
注意事项
=================================================================================================================================
float double 精度问题

float、double 都不能保证把所有的实数都精确的保存在计算机中：
    float yndPrice=99.9;
    printf("%f \n",yndPrice);==> 输出 99.900002

=================================================================================================================================    
#include <> "" 的区别

#include<>是直接在在系统提供的头文件中进行调用
而“”是在先当前目录下进行搜索，如果没有再搜索系统提供的头文件

=================================================================================================================================
实现程序暂停不退出

1,system("pause"); //#include "stdlib.h"  效果：请按任意键继续. . .
2,getch();         //#include "conio.h"   效果：静默，没有提示

=================================================================================================================================
变量作用域
=================================================================================================================================
全局变量名与局部变量名相同时

当局部变量名与全局变量名相同时，函数内的与全局变量名一致的变量为局部变量，对该变量的操作不影响全局变量

=================================================================================================================================
指针

含义：内存地址

指针与内存有关，即指向内存中一小块存储变量的地址。

指针变量：用来存放指针地址的变量，用 *号表示。
&：取变量地址符
*：声明变量地址符
例：
int *p;
int i=3;
p=&i;
//*p=i; *p就相当于i这个变量；i变化，*p的值也会跟着变化，因为两个变量指向的是同一个内存地址。

指针存储的内存地址（内存单元编号）是一个从0开始的非负整数（0-nG[n的1024次方]-1）。
指针变量的本质就是一个操作受限的非负整数。
=================================================================================================================================
指针的重要性

表示一些复杂的数据结构
快速的传递数据
使函数返回一个以上的值
能直接访问硬件
能够方便的处理字符串
是理解面向对象语言中引用的基础

=================================================================================================================================