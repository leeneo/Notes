一个程序应包括：数据结构&算法。
数据结构：对数据的描述，在程序中要指定数据的类型和数据的组织形式。
算法：对操作的描述，即操作步骤。
Pascal之父--尼古拉斯·沃斯(Niklaus Wirth) 曾提出一个计算机领域的著名公式：“算法+数据结构=程序”(Algorithm+Data Structures=Programs)

更贴切的描述：
程序=算法+数据结构+程序设计方法+语言工具和环境

什么是算法？
为解决一个问题而采取的方法和步骤，就是算法。

对于同一个问题，可以有不同的处理方法，但只有一条是最简洁，最有效率的。

我们通常所说的算法是计算机算法。
计算机算法是计算机能够执行的算法。

计算机算法可分为两大类：
数值运算算法：求数值解，比如一般的数学问题等
非数值运算算法：事务管理领域，比如图书检索、人事管理、公交调度管理等

一个简单的算法举例：比如求 1*2*3*4*5=?
解：
S1:使f=1
S2:使i=2
S3：计算f×i，结果仍放到f中
S4：使i的值增加1
S5：如果i不大于5，返回重新执行S3，否则打印结果——f的值，算法结束。
进一步抽象化==>：
S1: 1=>f
S2: 2=>i
S3: f×i=>f
S4: i+1=>i
S5: 若i≤5，返回S3；否则，打印f，结束。


*算法的特性

有穷性：一个算法应包含有限的操作步骤而不能是无限的。  
确定性：算法中每一个步骤应当是确定的，而不能应当是含糊的、模棱两可的
有效性：算法中每一个步骤应当能有效地执行，并得到确定的结果
有零个或多个输入
有一个或多个输出


算法的表示方法

用自然语言表示
用传统流程图表示算法
用N-S流程图表示算法
用伪代码表示算法
用计算机语言表示算法

*伪代码是用介于自然语言和计算机语言之间的文字和符号来描述算法。
伪代码实例: 求5的阶乘，用伪代码表示算法
英文版
BEGIN
    1=>t
    2=>i
    while i≤5
    {
        t×i=>t 
        i+1=>i
    }
    print t
END
中文版
开始
    置t的初值为1
    置i的初值为2
    当i<=5，执行下面操作：
        使t=t×i
        使i=i+1
    （循环体到此结束）
    输出t的值
 结束

计算机无法直接识别人类的语言和伪代码，为了描述算法，所以才开发出计算机能够识别的语言--计算机语言！

*要完成一件工作，包括设计算法和实现算法两个部分，设计算法并不多余，因为设计算法的目的就是为了更好地实现算法
设计优良的算法，可以更有效率的完成一项工作。


计算机语言示例：

C语言代码示例
#include <stdio.h>
void main()
{
	/*以下代码用于先提示分别输入5个学生的学号和成绩，格式为【学号 成绩】；然后输出成绩在80分以上的学生学号和成绩*/
	int stuNo[5];
	int stuScore[5];
	int i;

	for(i=0;i<5;i++)
	{
		printf("请输入第%d个学生的学号和成绩，中间用空格隔开：",i+1);
		scanf("%d %d",&stuNo[i],&stuScore[i]);
		printf("\n");
	}

	printf("=====================================\n");
	printf("输入完毕，成绩在80分以上的学生如下：\n");
	printf("=====================================\n");

	for(i=0;i<5;i++)
	{
		if(stuScore[i]>=80)
		{
			printf("学号：%d\t成绩：%d\n",stuNo[i],stuScore[i]);
		}
	}
}


计算机语言只是描述了完成一项工作所需要的算法，要完成工作还必需要实现算法。就是要将用计算机语言描述算法的代码，编译为计算机可识别的二进制文件，让程序执行起来，从而实现算法。
可以这么简单理解，程序就是计算机能够执行的（用计算机语言描述的）算法。

程序设计
百度百科给出的解释是：程序设计是给出解决特定问题程序的过程，是软件构造活动中的重要组成部分。
但就笔者目前来看，“程序设计”就是用计算机语言描述算法的过程。

程序设计方法

结构化程序设计方法（面向结构）--我觉得称其为流程化程序设计更贴切些
结构化程序设计方法的基本思路是：把一个复杂问题的求解过程分解成若干个阶段，每个阶段处理的问题都控制在人们容易理解和处理的范围内。
结构化程序设计分三种基本结构：顺序结构、选择结构、循环结构
特性是自上而下，有开始，有结束。

面向对象程序设计方法（面向对象）
面向对象的基本概念
1，对象
2，类
3，封装
4，继承
5，消息
6，多态性
优点
1，符合人们认识事物的规律
2，改善了程序的可读性
3，使人机交互更加贴近自然语言