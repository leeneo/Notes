/*SQL 命令大全*/
--代表注释

/*计算字符串字节长度*/
select LEN('00000002201803291912093015984')
select LEN('汉字') //=2 ，汉字一般占两个字节。

insert into MemberInfo (RegisterTime) values(GETDATE()) --GETDATE()== 当前时间，精确到毫秒

/*分离附加*/

--分离数据库 

use master
sp_detach_db 'database_name'   

--附加数据库

--1,
use master
EXEC sp_attach_db @dbname = N'pubs', 
@filename1 = N'c:\Program Files\Microsoft SQL Server\MSSQL\Data\pubs.mdf', 
@filename2 = N'c:\Program Files\Microsoft SQL Server\MSSQL\Data\pubs_log.ldf' 
此功能将在未来版本的Microsoft SQL Server中删除。避免在新的开发工作中使用此功能，并计划修改当前使用此功能的应用程序。我们建议您使用CREATE DATABASE database_name FOR ATTACH来代替

--2,
use master
CREATE DATABASE newhotel_xyjd
ON PRIMARY (FILENAME = 'D:\data\newhotel_xyjd.mdf') 
FOR ATTACH 
GO


/*db命令*/
sp_helpdb 
sp_helpdb master
use master
create database TestDB
sp_renamedb 'TestDB','MyLocalDb'
sp_helpdb MyLocalDb


/*table命令*/
use MyLocalDb
sp_help	/*查询当前数据库中对象(表，视图等)*/

create table People(
	FirstName nvarchar(6),
	LastName nvarchar(4),
	Age int,
	ID int identity (1,1),
	Primary key (ID)
);

sp_help people;				--查询指定表结构

drop table People

truncate table tbname		--删除表内容，释放表空间，不删除表结构（定义）

delete from tbname			--清空表内容，保留表结构，同truncate

/*增加字段*/
alter table card_type add IsShowInWeChat varchar(1) NOT NULL DEFAULT ('Y')
/*增加默认值*/
ALTER TABLE [dbo].[MemberInfo] ADD  DEFAULT ((0)) FOR [Points]
/*修改字段长度*/
alter table wxStoreOrders alter column paytype varchar(36)
/*删除字段*/
alter table wxStoreOrders drop column paytype varchar(36)

/*判断是否表字段是否存在*/
IF COL_LENGTH('MemberInfo', 'Points') IS NULL|IS NOT NULL
begin
	ALTER TABLE MemberInfo ADD Points int not null default 0
PRINT 'ok'
end
ELSE
PRINT '已有'

/*视图*/

CREATE VIEW [dbo].[v_wx_NewOrders]
AS
select * from someTable1
union select * from someTable2

/*结果集命令*/

insert into People (LastName,FirstName,Age) values(N'张',N'三','29');
insert into People (LastName,FirstName,Age) values(N'李',N'飞','29');
insert into People (LastName,FirstName,Age) values('张1','三2','29');		--不管是varchar还是nvarchar结构表，这样插入中文 显示乱码
--N'张'与'张' 字节长度是一样的

select distinct FirstName from People

select * from people where id between 2 and 5;		--返回结果集中id<=5&>=2的记录

delete from MemberInfo where MemberName is null		--删除为空数据 is null


/*存储过程*/

--声明变量并赋值
declare @Bdate varchar(20),@Edate varchar(20)
set 
@Bdate='2017-10-01'
set 
@Edate='2018-02-16'

SELECT * from table where SYS_DATE >= @Bdate AND SYS_DATE <= @Edate group by REGCARD.S_CARD_TYPE,s_describe ORDER BY REGCARD.S_CARD_TYPE ASC


--创建链接服务器，远程执行数据库的存储过程
exec sp_addlinkedserver 'TestServer','','SQLOLEDB','120.76.41.xx'
exec sp_addlinkedsrvlogin 'TestServer','false',null,'sa','pwd'
exec sp_serveroption 'TestServer','rpc out','true' --这个允许调用链接服务器上的存储过程

--查询已有链接服务器
 select * from sys.servers

--调用远程服务器存储过程：
exec TestServer.数据库名.dbo.过程名 '参数'

--demo:
select * from TestServer.TestDB.dbo.regcard where s_print_no = '17376852911'
select * from [120.76.42.118]].TestDB.dbo.regcard where s_print_no = '17376852911'

declare @as_error varchar(200)
exec TestServer.TestDB.dbo.Usp_Insert_cardaccount3 '', '11', '消费', @as_error output
select @as_error

=============================================================================================================
/*SET QUOTED_IDENTIFIER ON 的作用*/

distinct 为sql server 标识符，可以通过加双引号的方式作对象名使用，但在QUOTED_IDENTIFIER 为off时加双引号是不起作用的
SET QUOTED_IDENTIFIER ON
create table "distinct"(  
 id int not  null constraint pk_1 primary   key,  
 value varchar(255),  
 flag int  
)  

SET QUOTED_IDENTIFIER ON
drop table "distinct"
--------------------- --------------------- --------------------- --------------------- 
当 SET QUOTED_IDENTIFIER 为 ON 时

标识符可以由双引号分隔，而文字必须由单引号分隔。
由双引号分隔的所有字符串都被解释为对象标识符。因此，加引号的标识符不必遵守 Transact-SQL 标识符规则。它们可以是保留关键字，并且可以包含 Transact-SQL 标识符中通常不允许的字符。
不能使用双引号分隔文字字符串表达式，而必须用单引号括住文字字符串。
如果单引号 (‘) 是文字字符串的一部分，则可以由两个单引号 (”) 表示。
当对数据库中的对象名使用保留关键字时，SET QUOTED_IDENTIFIER 必须为 ON。
当 SET QUOTED_IDENTIFIER 为 OFF 时（默认值）

标识符不可加引号，且必须遵守所有 Transact-SQL 标识符规则。有关更多信息，请参见使用标识符。
表达式中的文字字符串可以由单引号或双引号分隔。
如果文字字符串由双引号分隔，则可以在字符串中包含嵌入式单引号。
当在计算列或索引视图上创建或操作索引时

SET QUOTED_IDENTIFIER 必须为 ON。
有关计算列上的索引视图和索引所必需的 SET 选项设置的更多信息，请参见 SET 中的”使用 SET 语句时的注意事项”

=============================================================================================================
/*SET ANSI_NULLS ON 的作用*/

当 SET ANSI_NULLS 为 ON 时，即使 column_name 中包含空值，使用 WHERE column_name = NULL 的 SELECT 语句仍返回零行。 即使 column_name 中包含非空值，使用 WHERE column_name <> NULL 的 SELECT 语句仍返回零行。

当 SET ANSI_NULLS 为 OFF 时，等于 (=) 和不等于 (<>) 比较运算符不遵守 ISO 标准。 使用 WHERE column_name = NULL 的 SELECT 语句返回 column_name 中包含空值的行。 使用 WHERE column_name <> NULL 的 SELECT 语句返回列中包含非空值的行。 此外，使用 WHERE column_name <> XYZ_value 的 SELECT 语句返回所有不为 XYZ_value 也不为 NULL 的行。

当 SET ANSI_NULLS 为 ON 时，所有对 null 值的比较均取值为 UNKNOWN。 当 SET ANSI_NULLS 为 OFF 时，如果数据值为 NULL，则所有数据对空值的比较将取值为 TRUE。 如果未指定 SET ANSI_NULLS，则应用当前数据库的 ANSI_NULLS 选项设置。

=============================================================================================================
游标一般格式：
DECLARE 游标名称 CURSOR FOR SELECT 字段1,字段2,字段3,... FROM 表名 WHERE ...
OPEN 游标名称
FETCH NEXT FROM 游标名称 INTO 变量名1,变量名2,变量名3,...
WHILE @@FETCH_STATUS=0
BEGIN
	SQL语句执行过程... ...
	FETCH NEXT FROM 游标名称 INTO 变量名1,变量名2,变量名3,...
END
CLOSE 游标名称
DEALLOCATE 游标名称 (删除游标)
--------------------- 
demo:
table1结构如下
id int
name varchar(50)
 
declare @id int
declare @name varchar(50)
declare cursor1 cursor for --定义游标cursor1
select * from table1 --使用游标的对象(跟据需要填入select文)
open cursor1 --打开游标
 
fetch next from cursor1 into @id,@name --将游标向下移1行，获取的数据放入之前定义的变量@id,@name中
 
while @@fetch_status=0 --判断是否成功获取数据   进入循环
begin
update table1 set name=name+'1'
where id=@id --进行相应处理(跟据需要填入SQL文)
 
fetch next from cursor1 into @id,@name? --将游标向下移1行  相当于for(int i;i<n;i++) 中的i+1
end
 
close cursor1 --关闭游标
deallocate cursor1
--------------------- 

=============================================================================================================
case when  then end用法

case '字段' when 'value1' then 'value' when 'value2' then 'value' end

declare @sex varchar(2)
select @sex='女'
select (case @sex when '男' then 'male' when '女' then 'female' end) as sex

seLect ct.s_work_no,(case ct.s_work_no when 'sys' then '1' when '000' then ct.s_password end) as password,* from ct_operator ct 
where ct.s_work_no='000'

------------------------------------------------------------------------------------
case when '判定式' then 'value' else 'value' end用法

declare @sex varchar(10)
select @sex='女'
select @sex=case when '男'<>'男' then 'male' else 'female' end
select @sex sex

seLect ct.s_work_no,case when ct.s_work_no='sys' then '1' else ct.s_password end asPassword from ct_operator ct 
where ct.s_work_no='0000' ==>等价
seLect ct.s_work_no,asPassword=case when ct.s_work_no='sys' then '1' else ct.s_password end  from ct_operator ct 
where ct.s_work_no='0000'

=============================================================================================================
Convert 函数用法 转换数据类型或日期

select n_price,CONVERT(INT,SUM(n_price)) price from billb1 where s_account_no='2018091749'
group by n_price

select Convert(varchar(255),GETDATE(),110) asDate
------------------------------------------------------------------------------------
四舍五入
Round() 函数	保留指定小数位数
ROUND(column_name,decimals)		decimals：精确到小数位数

select round(n_price,0) from billb1 where s_account_no='2018091749'
select ROUND(-1.237,2)==>-1.24
select ROUND(-1.232,2)==>-1.23
select ROUND(-1.23,1)==>-1.20
select ROUND(-1.23,0)==>-1.00

floor()向下取整 
floor(1.45)= 1,floor(1.55) = 1 ,floor(-1.45)= -2 ,floor(-1.55) = -2

ceiling()向上取整
ceiling(1.45) = 2,ceiling(1.55)=2,ceiling(-1.45) = -1,ceiling(-1.55)=-1

=============================================================================================================
SQL中的全局变量和局部变量（@@/@）

局部变量：@varName	是用户自定义变量
全局变量：@@varName	是系统预定义的，返回一些当前系统信息 

常用全局变量：
@@TRANCOUNT
返回当前连接中处于激活状态的事务数目

@@ERROR
返回当前执行Transact-SQL 语句的错误代码，无错返回0；

@@LANGID 
返回当前所使用语言的本地语言标识符(ID)。 

@@CONNECTIONS 
返回自上次启动以来连接或试图连接的次数。 

@@CURSOR_ROWS 
返回连接上最后打开的游标中当前存在的合格行的数量(返回被打开的游标中还未被读取的有效数据行的行数)

@@DATEFIRST 
返回每周第一天的数字  

@@FETCH_STATUS 
返回被 FETCH 语句执行的最后游标的状态，而不是任何当前被连接打开的游标的状态。 

@@IDENTITY 
返回最后插入的标识值 

@@LANGUAGE 
返回当前使用的语言名。 

@@LOCK_TIMEOUT 
返回当前会话的当前锁超时设置，单位为毫秒。 

@@PROCID 
返回当前过程的存储过程标识符 (ID) 。 

@@ROWCOUNT 
返回受上一语句影响的行数。 

@@SERVERNAME 
返回运行 的本地服务器名称。 

@@SPID 
返回当前用户进程的服务器进程标识符 (ID)。 

@@TRANCOUNT 
返回当前连接的活动事务数。 

@@VERSION 
返回当前安装的日期、版本和处理器类型。

@@CPU_BUSY
返回自SQL Server 最近一次启动以来CPU 的工作时间其单位为毫秒

@@DATEFIRST
返回使用SET DATEFIRST 命令而被赋值的DATAFIRST 参数值SET DATEFIRST，命令用来指定每周的第一天是星期几

@@DBTS
返回当前数据库的时间戳值必须保证数据库中时间戳的值是惟一的

@@FETCH_STATUS
返回上一次FETCH 语句的状态值

@@IDLE
返回自SQL Server 最近一次启动以来CPU 处于空闭状态的时间长短单位为毫秒

@@IO_BUSY
返回自SQL Server 最近一次启动以来CPU 执行输入输出操作所花费的时间其单位为毫秒

@@LANGID
返回当前所使用的语言ID 值

@@LANGUAGE
返回当前使用的语言名称

@@LOCK_TIMEOUT
返回当前会话等待锁的时间长短其单位为毫秒

@@MAX_CONNECTIONS
返回允许连接到SQL Server 的最大连接数目

@@MAX_PRECISION
返回decimal 和numeric 数据类型的精确度

@@NESTLEVEL
返回当前执行的存储过程的嵌套级数初始值为0

@@OPTIONS
返回当前SET 选项的信息

@@PACK_RECEIVED
返回SQL Server 通过网络读取的输入包的数目

@@PACK_SENT
返回SQL Server 写给网络的输出包的数目

@@PACKET_ERRORS
返回网络包的错误数目

@@PROCID
返回当前存储过程的ID 值

@@REMSERVER
返回远程SQL Server 数据库服务器的名称

@@SERVICENAME
返回SQL Server 正运行于哪种服务状态之下如MSSQLServer MSDTC SQLServerAgent

@@SPID
返回当前用户处理的服务器处理ID 值

@@TEXTSIZE
返回SET 语句的TEXTSIZE 选项值SET 语句定义了SELECT 语句中text 或image数据类型的最大长度基本单位为字节

@@TIMETICKS
返回每一时钟的微秒数

@@TOTAL_ERRORS
返回磁盘读写错误数目

@@TOTAL_READ
返回磁盘读操作的数目

@@TOTAL_WRITE
返回磁盘写操作的数目

=============================================================================================================
dbo.Fun_GetPY：拼音简码函数
select * from Customers where dbo.Fun_GetPY(Name) like '%xm%' or Name like '%小明%'		--xm:小明拼音首字母
